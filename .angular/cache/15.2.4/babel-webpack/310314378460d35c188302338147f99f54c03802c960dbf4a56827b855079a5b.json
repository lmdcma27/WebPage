{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"../../services/reload.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../header/header.component\";\nimport * as i5 from \"../table-of-contents/table-of-contents.component\";\nconst _c0 = [\"scrollContainer\"];\nexport class CpiComponent {\n  constructor(renderer, viewportScroller, reloadService, router) {\n    this.renderer = renderer;\n    this.viewportScroller = viewportScroller;\n    this.reloadService = reloadService;\n    this.router = router;\n    this.tableOfContents = [['section1', 'Introduction'], ['section2', 'Database connection'], ['section3', 'Essential Functions'], ['section4', 'Variations'], ['section5', 'F. Variations'], ['section6', 'Category indices'], ['section7', 'Consumer Price Index']];\n  }\n  ngOnInit() {\n    console.log(\"--------------------------------------\");\n    console.log(this.router.url);\n    this.loadScript('./assets/prism.js', 'js');\n    window.onload = () => {\n      this.loadScript('./assets/main.js', 'js');\n    };\n  }\n  loadScript(scriptUrl, Tipo) {\n    if (Tipo == 'js') {\n      const script = document.createElement('script');\n      script.type = 'text/javascript';\n      script.src = scriptUrl;\n      document.body.appendChild(script);\n    } else if (Tipo === 'css') {\n      const link = document.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      link.href = scriptUrl;\n      document.head.appendChild(link);\n    }\n  }\n  onClick(elementId) {\n    const container = this.scrollContainer.nativeElement;\n    const elementToScrollTo = document.getElementById(elementId);\n    if (elementToScrollTo) {\n      const scrollPosition = elementToScrollTo.offsetTop;\n      this.renderer.setProperty(container, 'scrollTop', scrollPosition);\n    }\n  }\n}\nCpiComponent.ɵfac = function CpiComponent_Factory(t) {\n  return new (t || CpiComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.ViewportScroller), i0.ɵɵdirectiveInject(i2.ReloadService), i0.ɵɵdirectiveInject(i3.Router));\n};\nCpiComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CpiComponent,\n  selectors: [[\"app-cpi\"]],\n  viewQuery: function CpiComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollContainer = _t.first);\n    }\n  },\n  decls: 239,\n  vars: 23,\n  consts: [[\"lang\", \"en\"], [\"charset\", \"UTF-8\"], [\"http-equiv\", \"X-UA-Compatible\", \"content\", \"IE=edge\"], [\"name\", \"viewport\", \"content\", \"width=device-width, initial-scale=1.0\"], [1, \"global\"], [3, \"tableOfContents\", \"scrollToElement\"], [1, \"content\"], [\"scrollContainer\", \"\"], [\"id\", \"section1\"], [\"href\", \"https://en.wikipedia.org/wiki/Consumer_price_index\"], [\"id\", \"section2\"], [1, \"container\"], [1, \"code-wrapper\"], [\"code\", \"\", \"id\", \"code\", 1, \"language-python\"], [\"id\", \"copy-button\"], [\"id\", \"section3\"], [\"id\", \"section4\"], [2, \"text-align\", \"center\"], [\"id\", \"section5\"], [\"id\", \"section6\"], [\"id\", \"section7\"]],\n  template: function CpiComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"html\", 0)(1, \"head\");\n      i0.ɵɵelement(2, \"meta\", 1)(3, \"meta\", 2)(4, \"meta\", 3);\n      i0.ɵɵelementStart(5, \"title\");\n      i0.ɵɵtext(6, \"Document\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(7, \"body\");\n      i0.ɵɵelement(8, \"app-header\");\n      i0.ɵɵelementStart(9, \"div\", 4)(10, \"app-table-of-contents\", 5);\n      i0.ɵɵlistener(\"scrollToElement\", function CpiComponent_Template_app_table_of_contents_scrollToElement_10_listener($event) {\n        return ctx.scrollToSection($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"div\", 6, 7)(13, \"div\", 8)(14, \"h2\");\n      i0.ɵɵtext(15, \"Introduction\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"p\");\n      i0.ɵɵtext(17, \" The Consumer Price Index (CPI) is a price index, the price of a weighted average market basket of consumer goods and services purchased by households. Changes in measured CPI track changes in prices over time \");\n      i0.ɵɵelementStart(18, \"a\", 9);\n      i0.ɵɵtext(19, \"See more\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(20, \". Now we goint to see how to calculate this index. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"p\");\n      i0.ɵɵtext(22, \" We use the Consumer price index manual. So, before to start with formulas and code we need some concepts about the Consumer Price I ndex:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"ol\")(24, \"li\");\n      i0.ɵɵtext(25, \" All products needed to calculate the CPI are called \");\n      i0.ɵɵelementStart(26, \"b\");\n      i0.ɵɵtext(27, \"articles\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(28, \", the articles are grouped into \");\n      i0.ɵɵelementStart(29, \"b\");\n      i0.ɵɵtext(30, \"basic expenses\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(31, \", the basic expanses into \");\n      i0.ɵɵelementStart(32, \"b\");\n      i0.ɵɵtext(33, \"subgroups\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(34, \", the subgroups into \");\n      i0.ɵɵelementStart(35, \"b\");\n      i0.ɵɵtext(36, \"groups\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(37, \", the groups into \");\n      i0.ɵɵelementStart(38, \"b\");\n      i0.ɵɵtext(39, \"clusters\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(40, \" and the clusters into \");\n      i0.ɵɵelementStart(41, \"b\");\n      i0.ɵɵtext(42, \"divisions\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(43, \". This are the six \");\n      i0.ɵɵelementStart(44, \"b\");\n      i0.ɵɵtext(45, \"categories\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(46, \". \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(47, \"li\");\n      i0.ɵɵtext(48, \" Each product/article has price (\\\\$) and quantity (g) in the time t (month). The price and weight is obtained from markets, supermarkets and stores (sources). \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(49, \"li\");\n      i0.ɵɵtext(50);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(51, \"p\");\n      i0.ɵɵtext(52, \"To calculate the article category indices we use the geometric mean, and to pass fron article category indices to upper category indices we use the a weighted arithmetic mean. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(53, \"p\");\n      i0.ɵɵtext(54, \"In this practice we calculate the CPI of a country divided into eight regions and each region has a database. All databses has the same tables. Therefore, we calculate the CPI in each region and then the overall CPI. \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(55, \"div\", 10)(56, \"h2\");\n      i0.ɵɵtext(57, \"Database Connection\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(58, \"p\");\n      i0.ɵɵtext(59, \"First create a class in python called CPI with the next attributes\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(60, \"div\", 11)(61, \"div\", 12)(62, \"pre\");\n      i0.ɵɵtext(63, \"                            \");\n      i0.ɵɵelementStart(64, \"code\", 13);\n      i0.ɵɵtext(65, \"   \\n                                def __init__(self,server : str,user : str,pas : str) -> None:\\n                                    self.codes = {'Art': [],'Gba': [],'Sub': [],'Gru': [],'Agr': [],'Div': []}\\n                                    self.lencodes = {'Art': 9,'Gba': 7,'Sub': 5,'Gru': 4,'Agr': 3,'Div': 2}\\n                                    self.periods : pd.DataFrame\\n                                    self.catwei = {'Art': [],'Gba': [],'Sub': [],'Gru': [],'Agr': [],'Div': []}\\n                                    self.regwei : pd.DataFrame\\n                                    self.di = {'Art':6,'Gba':5,'Sub':4,'Gru':3,'Agr':2,'Div':1}\\n                                    self.variations : pd.DataFrame \\n                                    self.indcat : pd.DataFrame\\n                                    self.indant : pd.DataFrame\\n                                    self.server = server\\n                                    self.user = user \\n                                    self.pas = pas\\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(66, \"\\n                        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(67, \"button\", 14);\n      i0.ɵɵtext(68, \" Copy \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(69, \"p\");\n      i0.ɵɵtext(70, \"To get the data, first use credentials to establish connection to database\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(71, \"div\", 11)(72, \"div\", 12)(73, \"pre\");\n      i0.ɵɵtext(74, \"                            \");\n      i0.ɵɵelementStart(75, \"code\", 13);\n      i0.ɵɵtext(76, \"   \\n                            def conectar(self, database : str) -> sqlalchemy.engine.Engine:                    \\n                                try:\\n                                    #Drivers: ODBC Driver 17 for SQL Server/SQL Server Native Client 11.0\\n                                    driver = 'ODBC Driver 17 for SQL Server'\\n                                    database_connection = f'mssql://{self.user}:{self.pas}@{self.server}/{database}?driver={driver}'\\n                                    engine = create_engine(database_connection)\\n                                    connection = engine.connect()\\n                                    return connection\\n                                except:\\n                                    print('Connection failed!')                 \\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(77, \"\\n                        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(78, \"button\", 14);\n      i0.ɵɵtext(79, \" Copy \");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(80, \"div\", 15)(81, \"h2\");\n      i0.ɵɵtext(82, \"Essential Functions\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(83, \"p\");\n      i0.ɵɵtext(84, \" In this section it is presented basic functions (queries to get periodicity, weights and codes) needed to pass from one category to other, especially to pass from articles category to next category.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(85, \"p\");\n      i0.ɵɵtext(86, \"With this method is posible get codes of elements from one category specifying it with 'cod'\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(87, \"div\", 11)(88, \"div\", 12)(89, \"pre\");\n      i0.ɵɵtext(90, \"                            \");\n      i0.ɵɵelementStart(91, \"code\", 13);\n      i0.ɵɵtext(92, \"   \\n                            def Codes(self, cod : str) -> None:\\n        \\n                                query = f\\\"SELECT DISTINCT {cod}Cod FROM DB1.dbo.CODES{self.di[cod]}\\\"\\n                                        idx = cod+'Cod' \\n                                self.codes[cod] = pd.read_sql(query, self.connect('master'), idx)\\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(93, \"\\n                        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(94, \"button\", 14);\n      i0.ɵɵtext(95, \" Copy \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(96, \"p\");\n      i0.ɵɵtext(97, \"Just articles category has periodicity attribute, this periodicity is different in each region, so is important especify the number region. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(98, \"div\", 11)(99, \"div\", 12)(100, \"pre\");\n      i0.ɵɵtext(101, \"                            \");\n      i0.ɵɵelementStart(102, \"code\", 13);\n      i0.ɵɵtext(103, \"   \\n                            def Periods(self, region : int) -> None:\\n        \\n                                query = f\\\"SELECT ArtCod, ArtPRC FROM DB{region}.dbo.ARTICLES ORDER BY ArtCod\\\"\\n                                idx = 'ArtCod'\\n                                self.periods = pd.read_sql(query, self.connect('master'), index_col=idx)\\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(104, \"\\n                        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(105, \"button\", 14);\n      i0.ɵɵtext(106, \" Copy \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(107, \"p\");\n      i0.ɵɵtext(108, \"In the same way that query the codes is posible query the category weights.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(109, \"div\", 11)(110, \"div\", 12)(111, \"pre\");\n      i0.ɵɵtext(112, \"                            \");\n      i0.ɵɵelementStart(113, \"code\", 13);\n      i0.ɵɵtext(114, \"   \\n                            def CatWei(self, cod : str) -> None:        \\n                                query = f'SELECT a.{cod}Cod, a.{cod}Pon as \\\"R1\\\", b.{cod}Pon as \\\"R2\\\", c.{cod}Pon as \\\"R3\\\", d.{cod}Pon as \\\"R4\\\", e.{cod}Pon as \\\"R5\\\", f.{cod}Pon as \\\"R6\\\", g.{cod}Pon as \\\"R7\\\", h.{cod}Pon as \\\"R8\\\"\\\\\\n                                        FROM  DB1.dbo.WEIGHTS{self.di[cod} a\\\\\\n                                        INNER JOIN DB2.dbo.WEIGHTS{self.di[cod]} b ON a.{cod}Cod = b.{cod}Cod\\\\\\n                                        INNER JOIN DB3.dbo.WEIGHTS{self.di[cod]} c ON a.{cod}Cod = c.{cod}Cod\\\\\\n                                        INNER JOIN DB4.dbo.WEIGHTS{self.di[cod]} d ON a.{cod}Cod = d.{cod}Cod\\\\\\n                                        INNER JOIN DB5.dbo.WEIGHTS{self.di[cod]} e ON a.{cod}Cod = e.{cod}Cod\\\\\\n                                        INNER JOIN DB6.dbo.WEIGHTS{self.di[cod]} f ON a.{cod}Cod = f.{cod}Cod\\\\\\n                                        INNER JOIN DB7.dbo.WEIGHTS{self.di[cod]} g ON a.{cod}Cod = g.{cod}Cod\\\\\\n                                        INNER JOIN DB8.dbo.WEIGHTS{self.di[cod]} h ON a.{cod}Cod = h.{cod}Cod\\\\\\n                                        ORDER BY a.{cod}Cod'              \\n                                self.catwei[cod] = pd.read_sql(query, self.connect('master'), index_col=cod+'Cod')\\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(115, \"\\n                        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(116, \"button\", 14);\n      i0.ɵɵtext(117, \" Copy \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵtext(118, \" In the final part, after to calculate the CPI per region, it is necessary make a weighted average to get the general CPI. So, the next method query the region weights. \");\n      i0.ɵɵelementStart(119, \"div\", 11)(120, \"div\", 12)(121, \"pre\");\n      i0.ɵɵtext(122, \"                            \");\n      i0.ɵɵelementStart(123, \"code\", 13);\n      i0.ɵɵtext(124, \"   \\n                            def RegWei(self) -> None:\\n        \\n                                query = f'SELECT a.RegWei, b.RegWei, c.RegWei, d.RegWei, e.RegWei, f.RegWei, g.RegWei, h.RegWei \\\\\\n                                        FROM DB1.dbo.REGINF a \\\\\\n                                        INNER JOIN DB2.dbo.REGINF b ON a.RegCod != b.RegCod\\\\\\n                                        INNER JOIN DB3.dbo.REGINF c ON a.RegCod != c.RegCod\\\\\\n                                        INNER JOIN DB4.dbo.REGINF d ON a.RegCod != d.RegCod\\\\\\n                                        INNER JOIN DB5.dbo.REGINF e ON a.RegCod != e.RegCod\\\\\\n                                        INNER JOIN DB6.dbo.REGINF f ON a.RegCod != f.RegCod\\\\\\n                                        INNER JOIN DB7.dbo.REGINF g ON a.RegCod != g.RegCod\\\\\\n                                        INNER JOIN DB8.dbo.REGINF h ON a.RegCod != h.RegCod'            \\n                                self.regwei = pd.read_sql(query, self.connect('master'))\\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(125, \"\\n                        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(126, \"button\", 14);\n      i0.ɵɵtext(127, \" Copy \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(128, \"p\");\n      i0.ɵɵtext(129, \"This function join and align the category indices of all regions using the its dataframe index (codes).\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(130, \"div\", 11)(131, \"div\", 12)(132, \"pre\");\n      i0.ɵɵtext(133, \"                            \");\n      i0.ɵɵelementStart(134, \"code\", 13);\n      i0.ɵɵtext(135, \"   \\n                            def joinAndAlign(self, df1 : pd.DataFrame, df2 : pd.DataFrame):\\n                                df1 = df1.merge(df2, how='outer', left_index=True, right_index=True,)\\n                                return df1    \\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(136, \"\\n                        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(137, \"button\", 14);\n      i0.ɵɵtext(138, \" Copy \");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(139, \"div\", 16)(140, \"h2\");\n      i0.ɵɵtext(141, \"Variations\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(142, \"p\");\n      i0.ɵɵtext(143);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(144, \"p\", 17);\n      i0.ɵɵtext(145);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(146, \"ol\")(147, \"li\");\n      i0.ɵɵtext(148, \" Variations with \");\n      i0.ɵɵelementStart(149, \"b\");\n      i0.ɵɵtext(150, \"change reference\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(151);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(152, \"li\");\n      i0.ɵɵtext(153);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(154, \"div\", 11)(155, \"div\", 12)(156, \"pre\");\n      i0.ɵɵtext(157, \"                            \");\n      i0.ɵɵelementStart(158, \"code\", 13);\n      i0.ɵɵtext(159, \"   \\n                            def Variations(self, year : int, month : int, region : int) -> None:\\n        \\n                                query = f\\\"SELECT ArtCod, PrePri,CurPri,PreQua,CurQua,ArtCR FROM DB{region}.dbo.PRICES\\\\\\n                                    WHERE YEAR = {year} AND MONTH = {month} \\\\\\n                                    ORDER BY ArtCod\\\"\\n                                temp = pd.read_sql(query, self.connect('master'), index_col='ArtCod')\\n                                temp['Variation'] = (temp['CurPri']*temp['PreQua'])/(temp['PrePri']*temp['CurQua'])\\n                                temp.loc[temp['ArtCR'] == 'S', 'Variation'] = 1.0\\n                                self.variations = temp['Variation'].replace([np.nan,np.inf],1.0).to_frame()\\n                              \\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(160, \"\\n                        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(161, \"button\", 14);\n      i0.ɵɵtext(162, \" Copy \");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(163, \"div\", 18)(164, \"h2\");\n      i0.ɵɵtext(165, \" F. Variations \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(166, \"p\");\n      i0.ɵɵtext(167, \"The index of one article is called flexible variation. The flexible variation of one article is:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(168, \"p\", 17);\n      i0.ɵɵtext(169);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(170, \"p\");\n      i0.ɵɵtext(171);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(172, \"div\", 11)(173, \"div\", 12)(174, \"pre\");\n      i0.ɵɵtext(175, \"                            \");\n      i0.ɵɵelementStart(176, \"code\", 13);\n      i0.ɵɵtext(177, \"   \\n                            def VarFlex(self) -> None:     \\n\\n                                groupBy = self.variations.groupby(self.variations.index)     \\n                                df = pd.DataFrame(columns=['ArtInd'], index=groupBy.groups.keys())\\n                                self.periods['ArtPRC'] = self.periods['ArtPRC'].astype(float)\\n                                for index in self.codes['Art'].index:\\n                                    period = self.periods.loc[index][0] \\n                                    try:\\n                                        arreglo = groupBy.get_group(index)['Variation']\\n                                        df.loc[index]['ArtInd'] = sp.gmean(arreglo)**(1/period)\\n                                    except KeyError:\\n                                        pass\\n                                self.indcat = df \\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(178, \"\\n                        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(179, \"button\", 14);\n      i0.ɵɵtext(180, \" Copy \");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(181, \"div\", 19)(182, \"h2\");\n      i0.ɵɵtext(183, \"Category Indices\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(184, \"p\");\n      i0.ɵɵtext(185, \"The indices of the next category can be calculate using:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(186, \"p\", 17);\n      i0.ɵɵtext(187);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(188, \"p\");\n      i0.ɵɵtext(189);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(190, \"p\", 17);\n      i0.ɵɵtext(191);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(192, \"p\");\n      i0.ɵɵtext(193, \"So, in this instance, the below method calculate the relative.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(194, \"div\", 11)(195, \"div\", 12)(196, \"pre\");\n      i0.ɵɵtext(197, \"                            \");\n      i0.ɵɵelementStart(198, \"code\", 13);\n      i0.ɵɵtext(199, \" \\n                            def IndCat(self, codInf : str, codSup : str, region : int) -> None:  \\n\\n                                union = self.indcat.merge(self.catwei[codInf]['R'+str(region)], how='inner', left_index=True, right_index=True,)        \\n                                groupBy = union.groupby(union.index.str[:self.lencodes[codSup]]).apply(lambda x: (x[codInf+'Ind']*(x['R'+str(region)]/x['R'+str(region)].sum())).sum())\\n                                df = pd.DataFrame(columns=[codSup+'Ind'], index=self.codes[codSup].index)\\n                                df.loc[groupBy.index,codSup+'Ind'] = groupBy\\n                                self.indcat = df\\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(200, \"\\n                        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(201, \"button\", 14);\n      i0.ɵɵtext(202, \" Copy \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(203, \"p\");\n      i0.ɵɵtext(204);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(205, \"div\", 11)(206, \"div\", 12)(207, \"pre\");\n      i0.ɵɵtext(208, \"                            \");\n      i0.ɵɵelementStart(209, \"code\", 13);\n      i0.ɵɵtext(210, \" \\n                            def IndAnt(self, year : int, month : int, cod : str) -> None:\\n\\n                                query = f'SELECT a.{cod}Cod, a.{cod}Ind, b.{cod}Ind, c.{cod}Ind, d.{cod}Ind, e{cod}Ind, f.{cod}Ind, g{cod}Ind, h.{cod}Ind \\\\\\n                                    FROM (SELECT {cod}Cod, {cod}Ind FROM DB1.dbo.INDICES{self.di[cod]} \\\\\\n                                    WHERE YEAR = {year} AND MONTH = {month}) a \\\\\\n                                    FULL OUTER JOIN (SELECT {cod}Cod, {cod}Ind FROM DB2.dbo.INDICES{self.di[cod]} \\\\\\n                                    WHERE YEAR = {year} AND MONTH = {month}) b ON a.{cod{Cod = b.{cod}Cod\\\\\\n                                    FULL OUTER JOIN (SELECT {cod}Cod, {cod}Ind FROM DB3.dbo.INDICES{self.di[cod]} \\\\\\n                                    WHERE YEAR = {year} AND MONTH = {month}) c ON a.{cod}Cod = c.{cod}Cod\\\\\\n                                    FULL OUTER JOIN (SELECT {cod}Cod, {cod}Ind FROM DB4.dbo.INDICES{self.di[cod]} WHERE YEAR = {year} AND MONTH = {month}) d ON a.{cod}Cod = d.{cod}Cod\\\\\\n                                    FULL OUTER JOIN (SELECT {cod}Cod, {cod}Ind FROM DB5.dbo.INDICES{self.di[cod]} WHERE YEAR = {year} AND MONTH = {month}) e ON a.{cod}Cod = e.{cod}Cod\\\\\\n                                    FULL OUTER JOIN (SELECT {cod}Cod, {cod}Ind FROM DB6.dbo.INDICES{self.di[cod]} WHERE YEAR = {year} AND MONTH = {month}) f ON a.{cod}Cod = f.{cod}Cod\\\\\\n                                    FULL OUTER JOIN (SELECT {cod}Cod, {cod}Ind FROM DB7.dbo.INDICES{self.di[cod]} WHERE YEAR = {year} AND MONTH = {month}) g ON a.{cod}Cod = g.{cod}Cod\\\\\\n                                    FULL OUTER JOIN (SELECT {cod}Cod, {cod}Ind FROM DB8.dbo.INDICES{self.di[cod]} WHERE YEAR = {year} AND MONTH = {month}) h ON a.{cod}Cod = h.{cod}Cod'\\n                                self.indant = pd.read_sql(query, self.connect('master'), index_col=cod+'Cod')\\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(211, \"\\n                        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(212, \"button\", 14);\n      i0.ɵɵtext(213, \" Copy \");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(214, \"div\", 20)(215, \"h2\");\n      i0.ɵɵtext(216, \"Consumer Price Index\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(217, \"p\");\n      i0.ɵɵtext(218, \"Now there is an object with the capacity to calculate the CPI. The last method is the builder that use all previous methods. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(219, \"div\", 11)(220, \"div\", 12)(221, \"pre\");\n      i0.ɵɵtext(222, \"                            \");\n      i0.ɵɵelementStart(223, \"code\", 13);\n      i0.ɵɵtext(224, \" \\n                            def Builder(self,year : int, month : int) -> None:\\n\\n                                #Ponderaciones de todas las categor\\u00EDas\\n                                self.CatWei('Art')\\n                                self.CatWei('Gba')\\n                                self.CatWei('Div')\\n                                #c\\u00F3digos de todas las categor\\u00EDas\\n                                self.Codes('Art')\\n                                self.Codes('Gba')\\n                                self.Codes('Div')\\n                                #Obtenemos los \\u00EDndices del month anterior\\n                                if month == 1:\\n                                    self.IndAnt(year - 1, 12, 'Gba')\\n                                else:\\n                                    self.IndAnt(year, month - 1, 'Gba')\\n                                for i in range(1,9):     \\n                                    self.Variations(year, month, i)\\n                                    \\n                                    #-------------------------------------------------------------------\\n                                    self.Periods(i)\\n                                    self.VarFlex()\\n                                    self.IndCat('Art','Gba', i)\\n                                    if i == 1:\\n                                        df = self.indcat.copy()\\n                                    else:\\n                                        df = self.joinAndAlign(df, self.indcat.copy())\\n                                indact = np.multiply(df,self.indant).replace(np.nan,0.0)\\n                                idiv = indact.groupby(indact.index.str[:self.lencodes['Div']]).sum()\\n                                #continuar con las ponderaciones, pero dentro del ciclo\\n                                cpiR = np.multiply(idiv, self.catwei['Div']).sum()/100\\n                                print(round(np.dot(cpiR,self.regwei.loc[0])/100,4))\\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(225, \"\\n                        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(226, \"button\", 14);\n      i0.ɵɵtext(227, \" Copy \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(228, \"p\");\n      i0.ɵɵtext(229, \"Finally create an instance of CPI, this takes credentials from console, called \\\"temp\\\" and execute builder method.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(230, \"div\", 11)(231, \"div\", 12)(232, \"pre\");\n      i0.ɵɵtext(233, \"                            \");\n      i0.ɵɵelementStart(234, \"code\", 13);\n      i0.ɵɵtext(235, \" \\n                            temp = CPI(sys.argv[1],sys.argv[2], sys.argv[3])\\n                            temp.Builder(int(sys.argv[4]),int(sys.argv[5]))\\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(236, \"\\n                        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(237, \"button\", 14);\n      i0.ɵɵtext(238, \" Copy \");\n      i0.ɵɵelementEnd()()()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"tableOfContents\", ctx.tableOfContents);\n      i0.ɵɵadvance(40);\n      i0.ɵɵtextInterpolate1(\" All articles have periodicity, for example, one article has periodicity \", \"$6$\", \" if the information about its price it's present in january and july. \");\n      i0.ɵɵadvance(93);\n      i0.ɵɵtextInterpolate3(\"The variation of an article for \", \"$a$\", \" in the current period \", \"$t$\", \", current month, for the source \", \"$s$\", \" is:\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(\"$V_{s,a,t} =\\\\frac{P_t Q_{t-1}}{P_{t-1} Q_t}$\");\n      i0.ɵɵadvance(6);\n      i0.ɵɵtextInterpolate2(\" \", \"ArtCR $=$ 'SI'\", \" must be replaced by \", \"$1,0$\", \" \");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" Variations whose value is undefined must be replaced by \", \"$1,0$\", \" \");\n      i0.ɵɵadvance(16);\n      i0.ɵɵtextInterpolate(\"$V_a = \\\\prod_{s=1}^n V_{s,a,t}$ raised to the $\\\\frac{1}{nm}$ power.\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate6(\" where \", \"$m$\", \" is periodicity of the article, \", \"$n$\", \" the number of sources and \", \"$V_{s,a,t}$\", \" is the variation of the article \", \"$a$\", \" for the source \", \"$s$\", \" in the current month \", \"$i$\", \". \");\n      i0.ɵɵadvance(16);\n      i0.ɵɵtextInterpolate1(\" \", \"$ R_{GB} = \\\\vec{\\\\alpha} \\\\cdot \\\\vec{V} $\", \" \");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate4(\" where \", \"$\\\\vec{\\\\alpha}$\", \" is the weight vector, \", \"$\\\\vec{V}$\", \" is the vector of indices and \", \"$ R_{GB}$\", \" the relative index. To get the true index is necessary multiply by \", \"$I_{GB}(t-1)$\", \", the corresponding index of the previous month: \");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", \"$I_{GB}(t)= R_{GB} \\\\times I_{GB}(t-1)$\", \" \");\n      i0.ɵɵadvance(13);\n      i0.ɵɵtextInterpolate1(\"And this method query the index in the month \", \"$t-1$\", \"\");\n    }\n  },\n  dependencies: [i4.HeaderComponent, i5.TableOfContentsComponent],\n  styles: [\"code[class*=language-][_ngcontent-%COMP%], pre[class*=language-][_ngcontent-%COMP%] {\\n    color: #f8f8f2;\\n    background: #000108;\\n    text-shadow: none;\\n    font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;\\n    font-size: 1em;\\n    text-align: left;\\n    white-space: pre;\\n    word-spacing: normal;\\n    word-break: normal;\\n    word-wrap: normal;\\n    line-height: 1.5;\\n    tab-size: 4;\\n    -webkit-hyphens: none;\\n    hyphens: none;\\n    }\\n    \\n    code[class*=language-][_ngcontent-%COMP%]   [_ngcontent-%COMP%]::-moz-selection, code[class*=language-][_ngcontent-%COMP%]   [_ngcontent-%COMP%]::selection, pre[class*=language-][_ngcontent-%COMP%]   [_ngcontent-%COMP%]::-moz-selection, pre[class*=language-][_ngcontent-%COMP%]   [_ngcontent-%COMP%]::selection {\\n    text-shadow: none;\\n    background: #000108;\\n    }\\n    \\n    @media print {\\n    code[class*=language-][_ngcontent-%COMP%], pre[class*=language-][_ngcontent-%COMP%] {\\n    text-shadow: none;\\n    }\\n    }\\n    \\n    pre[class*=language-][_ngcontent-%COMP%] {\\n    padding: 1em;\\n    margin: .5em 0;\\n    overflow: auto;\\n    }\\n    \\n    [_ngcontent-%COMP%]:not(pre)    > code[class*=language-][_ngcontent-%COMP%], pre[class*=language-][_ngcontent-%COMP%] {\\n    background: #000108;\\n    }\\n    \\n    [_ngcontent-%COMP%]:not(pre)    > code[class*=language-][_ngcontent-%COMP%] {\\n    padding: .1em;\\n    border-radius: .3em;\\n    white-space: normal;\\n    }\\n    \\n    .token.cdata[_ngcontent-%COMP%], .token.comment[_ngcontent-%COMP%], .token.doctype[_ngcontent-%COMP%], .token.prolog[_ngcontent-%COMP%] {\\n    color: #6272a4;\\n    }\\n    \\n    .token.punctuation[_ngcontent-%COMP%] {\\n    color: #f8f8f2;\\n    }\\n    \\n    .token.namespace[_ngcontent-%COMP%] {\\n    opacity: .7;\\n    }\\n    \\n    .token.boolean[_ngcontent-%COMP%], .token.constant[_ngcontent-%COMP%], .token.deleted[_ngcontent-%COMP%], .token.number[_ngcontent-%COMP%], .token.property[_ngcontent-%COMP%], .token.symbol[_ngcontent-%COMP%], .token.tag[_ngcontent-%COMP%] {\\n    color: #ff79c6;\\n    }\\n    \\n    .token.attr-name[_ngcontent-%COMP%], .token.builtin[_ngcontent-%COMP%], .token.char[_ngcontent-%COMP%], .token.inserted[_ngcontent-%COMP%], .token.selector[_ngcontent-%COMP%], .token.string[_ngcontent-%COMP%] {\\n    color: #f1fa8c;\\n    }\\n    \\n    .language-css[_ngcontent-%COMP%]   .token.string[_ngcontent-%COMP%], .style[_ngcontent-%COMP%]   .token.string[_ngcontent-%COMP%], .token.entity[_ngcontent-%COMP%], .token.operator[_ngcontent-%COMP%], .token.url[_ngcontent-%COMP%] {\\n    color: #50fa7b;\\n    background: #000108;\\n    }\\n    \\n    .token.atrule[_ngcontent-%COMP%], .token.attr-value[_ngcontent-%COMP%], .token.keyword[_ngcontent-%COMP%] {\\n    color: #8be9fd;\\n    }\\n    \\n    .token.class-name[_ngcontent-%COMP%], .token.function[_ngcontent-%COMP%] {\\n    color: #ffb86c;\\n    }\\n    \\n    .token.important[_ngcontent-%COMP%], .token.regex[_ngcontent-%COMP%], .token.variable[_ngcontent-%COMP%] {\\n    color: #bd93f9;\\n    }\\n    \\n    .token.bold[_ngcontent-%COMP%], .token.important[_ngcontent-%COMP%] {\\n    font-weight: 700;\\n    }\\n    \\n    .token.italic[_ngcontent-%COMP%] {\\n    font-style: italic;\\n    }\\n    \\n    .token.entity[_ngcontent-%COMP%] {\\n    cursor: help;\\n    }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9jcGkvcHJpc20uY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzBIQUMwSDtBQUMxSDtJQUNJLGNBQWM7SUFDZCxtQkFBbUI7SUFDbkIsaUJBQWlCO0lBQ2pCLHNFQUFzRTtJQUN0RSxjQUFjO0lBQ2QsZ0JBQWdCO0lBQ2hCLGdCQUFnQjtJQUNoQixvQkFBb0I7SUFDcEIsa0JBQWtCO0lBQ2xCLGlCQUFpQjtJQUNqQixnQkFBZ0I7SUFHaEIsV0FBVztJQUNYLHFCQUFxQjtJQUdyQixhQUFhO0lBQ2I7O0lBRUE7O0lBRUEsaUJBQWlCO0lBQ2pCLG1CQUFtQjtJQUNuQjs7SUFFQTtJQUNBO0lBQ0EsaUJBQWlCO0lBQ2pCO0lBQ0E7O0lBRUE7SUFDQSxZQUFZO0lBQ1osY0FBYztJQUNkLGNBQWM7SUFDZDs7SUFFQTs7SUFFQSxtQkFBbUI7SUFDbkI7O0lBRUE7SUFDQSxhQUFhO0lBQ2IsbUJBQW1CO0lBQ25CLG1CQUFtQjtJQUNuQjs7SUFFQTtJQUNBLGNBQWM7SUFDZDs7SUFFQTtJQUNBLGNBQWM7SUFDZDs7SUFFQTtJQUNBLFdBQVc7SUFDWDs7SUFFQTtJQUNBLGNBQWM7SUFDZDs7SUFFQTtJQUNBLGNBQWM7SUFDZDs7SUFFQTtJQUNBLGNBQWM7SUFDZCxtQkFBbUI7SUFDbkI7O0lBRUE7SUFDQSxjQUFjO0lBQ2Q7O0lBRUE7SUFDQSxjQUFjO0lBQ2Q7O0lBRUE7SUFDQSxjQUFjO0lBQ2Q7O0lBRUE7SUFDQSxnQkFBZ0I7SUFDaEI7O0lBRUE7SUFDQSxrQkFBa0I7SUFDbEI7O0lBRUE7SUFDQSxZQUFZO0lBQ1oiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBQcmlzbUpTIDEuMjkuMFxuaHR0cHM6Ly9wcmlzbWpzLmNvbS9kb3dubG9hZC5odG1sI3RoZW1lcz1wcmlzbSZsYW5ndWFnZXM9bWFya3VwK2NzcytjbGlrZStqYXZhc2NyaXB0K3B5dGhvbiZwbHVnaW5zPW5vcm1hbGl6ZS13aGl0ZXNwYWNlICovXG5jb2RlW2NsYXNzKj1sYW5ndWFnZS1dLCBwcmVbY2xhc3MqPWxhbmd1YWdlLV0ge1xuICAgIGNvbG9yOiAjZjhmOGYyO1xuICAgIGJhY2tncm91bmQ6ICMwMDAxMDg7XG4gICAgdGV4dC1zaGFkb3c6IG5vbmU7XG4gICAgZm9udC1mYW1pbHk6IENvbnNvbGFzLCBNb25hY28sICdBbmRhbGUgTW9ubycsICdVYnVudHUgTW9ubycsIG1vbm9zcGFjZTtcbiAgICBmb250LXNpemU6IDFlbTtcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgIHdoaXRlLXNwYWNlOiBwcmU7XG4gICAgd29yZC1zcGFjaW5nOiBub3JtYWw7XG4gICAgd29yZC1icmVhazogbm9ybWFsO1xuICAgIHdvcmQtd3JhcDogbm9ybWFsO1xuICAgIGxpbmUtaGVpZ2h0OiAxLjU7XG4gICAgLW1vei10YWItc2l6ZTogNDtcbiAgICAtby10YWItc2l6ZTogNDtcbiAgICB0YWItc2l6ZTogNDtcbiAgICAtd2Via2l0LWh5cGhlbnM6IG5vbmU7XG4gICAgLW1vei1oeXBoZW5zOiBub25lO1xuICAgIC1tcy1oeXBoZW5zOiBub25lO1xuICAgIGh5cGhlbnM6IG5vbmU7XG4gICAgfVxuICAgIFxuICAgIGNvZGVbY2xhc3MqPWxhbmd1YWdlLV0gOjotbW96LXNlbGVjdGlvbiwgY29kZVtjbGFzcyo9bGFuZ3VhZ2UtXSA6OnNlbGVjdGlvbixcbiAgICBwcmVbY2xhc3MqPWxhbmd1YWdlLV0gOjotbW96LXNlbGVjdGlvbiwgcHJlW2NsYXNzKj1sYW5ndWFnZS1dIDo6c2VsZWN0aW9uIHtcbiAgICB0ZXh0LXNoYWRvdzogbm9uZTtcbiAgICBiYWNrZ3JvdW5kOiAjMDAwMTA4O1xuICAgIH1cbiAgICBcbiAgICBAbWVkaWEgcHJpbnQge1xuICAgIGNvZGVbY2xhc3MqPWxhbmd1YWdlLV0sIHByZVtjbGFzcyo9bGFuZ3VhZ2UtXSB7XG4gICAgdGV4dC1zaGFkb3c6IG5vbmU7XG4gICAgfVxuICAgIH1cbiAgICBcbiAgICBwcmVbY2xhc3MqPWxhbmd1YWdlLV0ge1xuICAgIHBhZGRpbmc6IDFlbTtcbiAgICBtYXJnaW46IC41ZW0gMDtcbiAgICBvdmVyZmxvdzogYXV0bztcbiAgICB9XG4gICAgXG4gICAgOm5vdChwcmUpID4gY29kZVtjbGFzcyo9bGFuZ3VhZ2UtXSxcbiAgICBwcmVbY2xhc3MqPWxhbmd1YWdlLV0ge1xuICAgIGJhY2tncm91bmQ6ICMwMDAxMDg7XG4gICAgfVxuICAgIFxuICAgIDpub3QocHJlKSA+IGNvZGVbY2xhc3MqPWxhbmd1YWdlLV0ge1xuICAgIHBhZGRpbmc6IC4xZW07XG4gICAgYm9yZGVyLXJhZGl1czogLjNlbTtcbiAgICB3aGl0ZS1zcGFjZTogbm9ybWFsO1xuICAgIH1cbiAgICBcbiAgICAudG9rZW4uY2RhdGEsIC50b2tlbi5jb21tZW50LCAudG9rZW4uZG9jdHlwZSwgLnRva2VuLnByb2xvZyB7XG4gICAgY29sb3I6ICM2MjcyYTQ7XG4gICAgfVxuICAgIFxuICAgIC50b2tlbi5wdW5jdHVhdGlvbiB7XG4gICAgY29sb3I6ICNmOGY4ZjI7XG4gICAgfVxuICAgIFxuICAgIC50b2tlbi5uYW1lc3BhY2Uge1xuICAgIG9wYWNpdHk6IC43O1xuICAgIH1cbiAgICBcbiAgICAudG9rZW4uYm9vbGVhbiwgLnRva2VuLmNvbnN0YW50LCAudG9rZW4uZGVsZXRlZCwgLnRva2VuLm51bWJlciwgLnRva2VuLnByb3BlcnR5LCAudG9rZW4uc3ltYm9sLCAudG9rZW4udGFnIHtcbiAgICBjb2xvcjogI2ZmNzljNjtcbiAgICB9XG4gICAgXG4gICAgLnRva2VuLmF0dHItbmFtZSwgLnRva2VuLmJ1aWx0aW4sIC50b2tlbi5jaGFyLCAudG9rZW4uaW5zZXJ0ZWQsIC50b2tlbi5zZWxlY3RvciwgLnRva2VuLnN0cmluZyB7XG4gICAgY29sb3I6ICNmMWZhOGM7XG4gICAgfVxuICAgIFxuICAgIC5sYW5ndWFnZS1jc3MgLnRva2VuLnN0cmluZywgLnN0eWxlIC50b2tlbi5zdHJpbmcsIC50b2tlbi5lbnRpdHksIC50b2tlbi5vcGVyYXRvciwgLnRva2VuLnVybCB7XG4gICAgY29sb3I6ICM1MGZhN2I7XG4gICAgYmFja2dyb3VuZDogIzAwMDEwODtcbiAgICB9XG4gICAgXG4gICAgLnRva2VuLmF0cnVsZSwgLnRva2VuLmF0dHItdmFsdWUsIC50b2tlbi5rZXl3b3JkIHtcbiAgICBjb2xvcjogIzhiZTlmZDtcbiAgICB9XG4gICAgXG4gICAgLnRva2VuLmNsYXNzLW5hbWUsIC50b2tlbi5mdW5jdGlvbiB7XG4gICAgY29sb3I6ICNmZmI4NmM7XG4gICAgfVxuICAgIFxuICAgIC50b2tlbi5pbXBvcnRhbnQsIC50b2tlbi5yZWdleCwgLnRva2VuLnZhcmlhYmxlIHtcbiAgICBjb2xvcjogI2JkOTNmOTtcbiAgICB9XG4gICAgXG4gICAgLnRva2VuLmJvbGQsIC50b2tlbi5pbXBvcnRhbnQge1xuICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG4gICAgfVxuICAgIFxuICAgIC50b2tlbi5pdGFsaWMge1xuICAgIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgICB9XG4gICAgXG4gICAgLnRva2VuLmVudGl0eSB7XG4gICAgY3Vyc29yOiBoZWxwO1xuICAgIH1cbiJdLCJzb3VyY2VSb290IjoiIn0= */\", \"html[_ngcontent-%COMP%] {\\n  scroll-behavior: smooth;\\n}\\n\\n.global[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: row;\\n  width: 100%;\\n  height: 90vh;\\n  background-color: black;\\n  position: relative;  \\n}\\n\\n.tableOfContents[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  flex: 1;\\n  color: white;\\n  margin-top: 5%;\\n  margin-bottom: 5%;\\n  align-items: center;\\n\\n}\\n\\n.tableOfContents[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]:hover{\\n  color: black;\\n  background-color: white;    \\n  border-radius: 20px;\\n  text-align: left;\\n}\\n\\n.content[_ngcontent-%COMP%] {\\n  padding: 2.1%;\\n  flex: 3.5;\\n  border-style: groove;\\n  border-color: grey;\\n  border-top-right-radius: 20px;\\n  border-bottom-right-radius: 20px;\\n  background-color: white;\\n  overflow-y: scroll;\\n}\\n\\nul[_ngcontent-%COMP%] {\\n  list-style: none;\\n  padding: 0;\\n  margin: 0;\\n}\\n\\nli[_ngcontent-%COMP%] {\\n  margin-top: 8%;\\n}\\n\\na[_ngcontent-%COMP%] {\\n  text-decoration: none;\\n  color: gray;\\n}\\n\\na[_ngcontent-%COMP%]:hover {\\n  -webkit-text-decoration:solid;\\n          text-decoration:solid;\\n}\\n\\na[href^=\\\"#\\\"][_ngcontent-%COMP%] {\\n  transition-duration: 10000s; \\n}\\n\\n#section1[_ngcontent-%COMP%], #section2[_ngcontent-%COMP%], #section3[_ngcontent-%COMP%], #section4[_ngcontent-%COMP%], #section5[_ngcontent-%COMP%], #section6[_ngcontent-%COMP%], #section7[_ngcontent-%COMP%], #section8[_ngcontent-%COMP%]{\\n  padding: 20px;\\n  margin-bottom: 20px;\\n}\\n\\n\\n\\n.container[_ngcontent-%COMP%] {\\n  width: 90%;\\n  height: 100%;\\n  overflow: auto;\\n  border-radius: 12px;\\n  margin-left: 10%;\\n}\\n\\n[language-python^=\\\"[_ngcontent-%COMP%]{{ }}\\\"][_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.code-wrapper[_ngcontent-%COMP%] {\\n  position: relative;\\n\\n}\\n\\n#copy-button[_ngcontent-%COMP%]{\\n  position: absolute;\\n  top: 8px;\\n  right: 8px;\\n  padding: 7px;\\n  background-color: #2d2d2d;\\n  outline: none;\\n  color: white;\\n  border-radius: 8px;\\n  cursor: pointer;\\n  transition: all 0.2s ease-in;\\n  opacity: 0;\\n  border: 1px solid antiquewhite;\\n}\\n\\n#copy-button.show-msg[_ngcontent-%COMP%]{\\n  display: none;\\n\\n}\\n#copy-button[_ngcontent-%COMP%]:hover{\\n  background-color: #423e3e;\\n}\\n\\n.code-wrapper[_ngcontent-%COMP%]:hover   #copy-button[_ngcontent-%COMP%]{\\n  opacity: 1;\\n}\\n\\n\\n\\np[_ngcontent-%COMP%] {\\n  text-indent: 2em;\\n }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9jcGkvY3BpLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSx1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsbUJBQW1CO0VBQ25CLFdBQVc7RUFDWCxZQUFZO0VBQ1osdUJBQXVCO0VBQ3ZCLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsT0FBTztFQUNQLFlBQVk7RUFDWixjQUFjO0VBQ2QsaUJBQWlCO0VBQ2pCLG1CQUFtQjs7QUFFckI7O0FBRUE7RUFDRSxZQUFZO0VBQ1osdUJBQXVCO0VBQ3ZCLG1CQUFtQjtFQUNuQixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsU0FBUztFQUNULG9CQUFvQjtFQUNwQixrQkFBa0I7RUFDbEIsNkJBQTZCO0VBQzdCLGdDQUFnQztFQUNoQyx1QkFBdUI7RUFDdkIsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLFVBQVU7RUFDVixTQUFTO0FBQ1g7O0FBRUE7RUFDRSxjQUFjO0FBQ2hCOztBQUVBO0VBQ0UscUJBQXFCO0VBQ3JCLFdBQVc7QUFDYjs7QUFFQTtFQUNFLDZCQUFxQjtVQUFyQixxQkFBcUI7QUFDdkI7O0FBRUE7RUFDRSwyQkFBMkIsRUFBRSw4Q0FBOEM7QUFDN0U7O0FBRUE7Ozs7Ozs7O0VBUUUsYUFBYTtFQUNiLG1CQUFtQjtBQUNyQjs7OztBQUlBO0VBQ0UsVUFBVTtFQUNWLFlBQVk7RUFDWixjQUFjO0VBQ2QsbUJBQW1CO0VBQ25CLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGFBQWE7QUFDZjs7QUFFQTtFQUNFLGtCQUFrQjs7QUFFcEI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsUUFBUTtFQUNSLFVBQVU7RUFDVixZQUFZO0VBQ1oseUJBQXlCO0VBQ3pCLGFBQWE7RUFDYixZQUFZO0VBQ1osa0JBQWtCO0VBQ2xCLGVBQWU7RUFDZiw0QkFBNEI7RUFDNUIsVUFBVTtFQUNWLDhCQUE4QjtBQUNoQzs7QUFFQTtFQUNFLGFBQWE7O0FBRWY7QUFDQTtFQUNFLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLFVBQVU7QUFDWjs7OztBQUlBO0VBQ0UsZ0JBQWdCO0NBQ2pCIiwic291cmNlc0NvbnRlbnQiOlsiaHRtbCB7XG4gIHNjcm9sbC1iZWhhdmlvcjogc21vb3RoO1xufVxuXG4uZ2xvYmFsIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogOTB2aDtcbiAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTsgIFxufVxuXG4udGFibGVPZkNvbnRlbnRzIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgZmxleDogMTtcbiAgY29sb3I6IHdoaXRlO1xuICBtYXJnaW4tdG9wOiA1JTtcbiAgbWFyZ2luLWJvdHRvbTogNSU7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbn1cblxuLnRhYmxlT2ZDb250ZW50cyBsaTpob3ZlcntcbiAgY29sb3I6IGJsYWNrO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsgICAgXG4gIGJvcmRlci1yYWRpdXM6IDIwcHg7XG4gIHRleHQtYWxpZ246IGxlZnQ7XG59XG5cbi5jb250ZW50IHtcbiAgcGFkZGluZzogMi4xJTtcbiAgZmxleDogMy41O1xuICBib3JkZXItc3R5bGU6IGdyb292ZTtcbiAgYm9yZGVyLWNvbG9yOiBncmV5O1xuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMjBweDtcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDIwcHg7XG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICBvdmVyZmxvdy15OiBzY3JvbGw7XG59XG5cbnVsIHtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luOiAwO1xufVxuXG5saSB7XG4gIG1hcmdpbi10b3A6IDglO1xufVxuXG5hIHtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICBjb2xvcjogZ3JheTtcbn1cblxuYTpob3ZlciB7XG4gIHRleHQtZGVjb3JhdGlvbjpzb2xpZDtcbn1cblxuYVtocmVmXj1cIiNcIl0ge1xuICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAxMDAwMHM7IC8qIENoYW5nZSB0aGlzIHRvIGFkanVzdCB0aGUgYW5pbWF0aW9uIHNwZWVkICovXG59XG5cbiNzZWN0aW9uMSxcbiNzZWN0aW9uMixcbiNzZWN0aW9uMyxcbiNzZWN0aW9uNCxcbiNzZWN0aW9uNSxcbiNzZWN0aW9uNixcbiNzZWN0aW9uNyxcbiNzZWN0aW9uOHtcbiAgcGFkZGluZzogMjBweDtcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcbn1cblxuXG5cbi5jb250YWluZXIge1xuICB3aWR0aDogOTAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIG92ZXJmbG93OiBhdXRvO1xuICBib3JkZXItcmFkaXVzOiAxMnB4O1xuICBtYXJnaW4tbGVmdDogMTAlO1xufVxuXG5bbGFuZ3VhZ2UtcHl0aG9uXj1cInt7IH19XCJdIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLmNvZGUtd3JhcHBlciB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcblxufVxuXG4jY29weS1idXR0b257XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiA4cHg7XG4gIHJpZ2h0OiA4cHg7XG4gIHBhZGRpbmc6IDdweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzJkMmQyZDtcbiAgb3V0bGluZTogbm9uZTtcbiAgY29sb3I6IHdoaXRlO1xuICBib3JkZXItcmFkaXVzOiA4cHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZS1pbjtcbiAgb3BhY2l0eTogMDtcbiAgYm9yZGVyOiAxcHggc29saWQgYW50aXF1ZXdoaXRlO1xufVxuXG4jY29weS1idXR0b24uc2hvdy1tc2d7XG4gIGRpc3BsYXk6IG5vbmU7XG5cbn1cbiNjb3B5LWJ1dHRvbjpob3ZlcntcbiAgYmFja2dyb3VuZC1jb2xvcjogIzQyM2UzZTtcbn1cblxuLmNvZGUtd3JhcHBlcjpob3ZlciAjY29weS1idXR0b257XG4gIG9wYWNpdHk6IDE7XG59XG5cblxuXG5wIHtcbiAgdGV4dC1pbmRlbnQ6IDJlbTtcbiB9XG5cbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["CpiComponent","constructor","renderer","viewportScroller","reloadService","router","ngOnInit","console","log","url","loadScript","window","onload","scriptUrl","Tipo","script","document","createElement","type","src","body","appendChild","link","rel","href","head","onClick","elementId","container","scrollContainer","nativeElement","elementToScrollTo","getElementById","scrollPosition","offsetTop","setProperty","selectors","viewQuery","i0","ctx"],"sourceRoot":"","sources":["/home/lmdc/Documents/WebPage/src/app/components/cpi/cpi.component.ts","/home/lmdc/Documents/WebPage/src/app/components/cpi/cpi.component.html"],"sourcesContent":["  import { ViewportScroller } from '@angular/common';\n  import { Component, AfterViewInit,OnInit, ElementRef, Renderer2, ViewChild } from '@angular/core';\n  import { TableOfContents } from './tableOfContents';\n  import { ReloadService } from '../../services/reload.service'\n  import { Router } from '@angular/router';\n  \n  @Component({\n    selector: 'app-cpi',\n    templateUrl: './cpi.component.html',\n    styleUrls: ['./prism.css','./cpi.component.css']\n  })\n  export class CpiComponent implements OnInit {    \n    @ViewChild('scrollContainer', { static: true }) scrollContainer!: ElementRef;\n\n    tableOfContents: Array<string>[]= [\n      ['section1','Introduction'],\n      ['section2','Database connection'],\n      ['section3','Essential Functions'],\n      ['section4','Variations'],\n      ['section5','F. Variations'],\n      ['section6','Category indices'],\n      ['section7','Consumer Price Index'],\n    ];\n  \n\n    constructor(private renderer: Renderer2,private viewportScroller: ViewportScroller,private reloadService: ReloadService,private router: Router) {}\n    \n    ngOnInit() {\n      console.log(\"--------------------------------------\")\n      console.log(this.router.url)\n      this.loadScript('./assets/prism.js', 'js');\n      window.onload = () => {\n        this.loadScript('./assets/main.js', 'js');\n      };\n    }\n\n    loadScript(scriptUrl: string,Tipo: string) {\n      if (Tipo=='js'){\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = scriptUrl;\n        document.body.appendChild(script);\n      }  else if (Tipo === 'css') {\n        const link = document.createElement('link');\n        link.rel='stylesheet'\n        link.type = 'text/css';\n        link.href = scriptUrl;\n        document.head.appendChild(link);\n      }\n        \n    }\n    \n\n    public onClick(elementId: string): void { \n      const container = this.scrollContainer.nativeElement;\n      const elementToScrollTo = document.getElementById(elementId);\n  \n      if (elementToScrollTo) {\n        const scrollPosition = elementToScrollTo.offsetTop;\n        this.renderer.setProperty(container, 'scrollTop', scrollPosition);\n      }\n    }\n\n  }\n\n  \n\n  \n  ","<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    \n    <title>Document</title>\n</head>\n\n<body>\n    \n    <app-header></app-header>\n    \n    <div class=\"global\">\n        \n        <app-table-of-contents [tableOfContents]=\"tableOfContents\" (scrollToElement)=\"scrollToSection($event)\"></app-table-of-contents>\n        \n        <div class=\"content\" #scrollContainer >\n\n            <div id=\"section1\">\n                    <h2>Introduction</h2>\n                    <p> The Consumer Price Index (CPI) is a price index, the price of a weighted average market basket \n                        of consumer goods and services purchased by households. Changes in measured CPI track changes in prices \n                        over time <a href=\"https://en.wikipedia.org/wiki/Consumer_price_index\">See more</a>. Now we goint to see how to calculate\n                        this index.\n                    </p>\n\n                    <p> We use the Consumer price index manual. So, before to start with formulas and code we need some concepts about the Consumer Price I ndex:</p>\n                    <ol>\n                        <li>\n                            All products needed to calculate the CPI are called <b>articles</b>, the articles are grouped into\n                            <b>basic expenses</b>, the basic expanses into <b>subgroups</b>, the subgroups into <b>groups</b>, the groups\n                            into <b>clusters</b> and the clusters into <b>divisions</b>. This are the six <b>categories</b>.\n                        </li>\n                        <li>\n                            Each product/article has price (\\$) and quantity (g) in the time t (month). The price and weight is obtained from markets,\n                            supermarkets and stores (sources).\n                        </li>\n                        <li>\n                            All articles have periodicity, for example, one article has periodicity {{'$6$'}} if the information about its price\n                            it's present in january and july.\n                        </li>\n                    </ol>\n                    <p>To calculate the article category indices we use the geometric mean, and to pass fron article category indices to upper \n                        category indices we use the a weighted arithmetic mean.\n                    </p>                        \n                    <p>In this practice we calculate the CPI of a country divided into eight regions and each region has a database. All databses\n                        has the same tables. Therefore, we calculate the CPI in each region and then the overall CPI.\n                    </p>\n                    \n            </div>\n\n            <div id=\"section2\">\n                <h2>Database Connection</h2>\n\n                <p>First create a class in python called CPI with the next attributes</p>\n\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                            <code code id=\"code\" class=\"language-python\">   \n                                def __init__(self,server : str,user : str,pas : str) -> None:\n                                    self.codes = &#123;'Art': [],'Gba': [],'Sub': [],'Gru': [],'Agr': [],'Div': []&#125;\n                                    self.lencodes = &#123;'Art': 9,'Gba': 7,'Sub': 5,'Gru': 4,'Agr': 3,'Div': 2&#125;\n                                    self.periods : pd.DataFrame\n                                    self.catwei = &#123;'Art': [],'Gba': [],'Sub': [],'Gru': [],'Agr': [],'Div': []&#125;\n                                    self.regwei : pd.DataFrame\n                                    self.di = &#123;'Art':6,'Gba':5,'Sub':4,'Gru':3,'Agr':2,'Div':1&#125;\n                                    self.variations : pd.DataFrame \n                                    self.indcat : pd.DataFrame\n                                    self.indant : pd.DataFrame\n                                    self.server = server\n                                    self.user = user \n                                    self.pas = pas\n                            </code>\n                        </pre>\n                        <button id=\"copy-button\" >\n                            Copy\n                        </button>\n                    </div>                    \n                </div>\n\n                <p>To get the data, first   use credentials to establish connection to database</p>\n                \n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                            <code code id=\"code\" class=\"language-python\">   \n                            def conectar(self, database : str) -> sqlalchemy.engine.Engine:                    \n                                try:\n                                    #Drivers: ODBC Driver 17 for SQL Server/SQL Server Native Client 11.0\n                                    driver = 'ODBC Driver 17 for SQL Server'\n                                    database_connection = f'mssql://&#123;self.user&#125;:&#123;self.pas&#125;@&#123;self.server&#125;/&#123;database&#125;?driver=&#123;driver&#125;'\n                                    engine = create_engine(database_connection)\n                                    connection = engine.connect()\n                                    return connection\n                                except:\n                                    print('Connection failed!')                 \n                            </code>\n                        </pre>\n                        <button id=\"copy-button\" >\n                            Copy\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n            <div id=\"section3\">\n                <h2>Essential Functions</h2>\n                <p> In this section it is presented basic functions (queries to get periodicity, weights and codes) needed to pass from one category to other, especially to pass from \n                articles category to next category.</p>\n\n\n                <p>With this method is posible get codes of elements from one category specifying it with 'cod'</p>\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                            <code code id=\"code\" class=\"language-python\">   \n                            def Codes(self, cod : str) -> None:\n        \n                                query = f\"SELECT DISTINCT &#123;cod&#125;Cod FROM DB1.dbo.CODES&#123;self.di[cod]&#125;\"\n                                        idx = cod+'Cod' \n                                self.codes[cod] = pd.read_sql(query, self.connect('master'), idx)\n                            </code>\n                        </pre>\n                        <button id=\"copy-button\" >\n                            Copy\n                        </button>\n                    </div>\n                </div>\n\n                <p>Just articles category has periodicity attribute, this periodicity is different in each region, so is important especify the number region.  </p>\n\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                            <code code id=\"code\" class=\"language-python\">   \n                            def Periods(self, region : int) -> None:\n        \n                                query = f\"SELECT ArtCod, ArtPRC FROM DB&#123;region&#125;.dbo.ARTICLES ORDER BY ArtCod\"\n                                idx = 'ArtCod'\n                                self.periods = pd.read_sql(query, self.connect('master'), index_col=idx)\n                            </code>\n                        </pre>\n                        <button id=\"copy-button\" >\n                            Copy\n                        </button>\n                    </div>\n                </div>\n\n                <p>In the same way that query the codes is posible query the category weights.</p>\n\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                            <code code id=\"code\" class=\"language-python\">   \n                            def CatWei(self, cod : str) -> None:        \n                                query = f'SELECT a.&#123;cod&#125;Cod, a.&#123;cod&#125;Pon as \"R1\", b.&#123;cod&#125;Pon as \"R2\", c.&#123;cod&#125;Pon as \"R3\", d.&#123;cod&#125;Pon as \"R4\", e.&#123;cod&#125;Pon as \"R5\", f.&#123;cod&#125;Pon as \"R6\", g.&#123;cod&#125;Pon as \"R7\", h.&#123;cod&#125;Pon as \"R8\"\\\n                                        FROM  DB1.dbo.WEIGHTS&#123;self.di[cod&#125; a\\\n                                        INNER JOIN DB2.dbo.WEIGHTS&#123;self.di[cod]&#125; b ON a.&#123;cod&#125;Cod = b.&#123;cod&#125;Cod\\\n                                        INNER JOIN DB3.dbo.WEIGHTS&#123;self.di[cod]&#125; c ON a.&#123;cod&#125;Cod = c.&#123;cod&#125;Cod\\\n                                        INNER JOIN DB4.dbo.WEIGHTS&#123;self.di[cod]&#125; d ON a.&#123;cod&#125;Cod = d.&#123;cod&#125;Cod\\\n                                        INNER JOIN DB5.dbo.WEIGHTS&#123;self.di[cod]&#125; e ON a.&#123;cod&#125;Cod = e.&#123;cod&#125;Cod\\\n                                        INNER JOIN DB6.dbo.WEIGHTS&#123;self.di[cod]&#125; f ON a.&#123;cod&#125;Cod = f.&#123;cod&#125;Cod\\\n                                        INNER JOIN DB7.dbo.WEIGHTS&#123;self.di[cod]&#125; g ON a.&#123;cod&#125;Cod = g.&#123;cod&#125;Cod\\\n                                        INNER JOIN DB8.dbo.WEIGHTS&#123;self.di[cod]&#125; h ON a.&#123;cod&#125;Cod = h.&#123;cod&#125;Cod\\\n                                        ORDER BY a.&#123;cod&#125;Cod'              \n                                self.catwei[cod] = pd.read_sql(query, self.connect('master'), index_col=cod+'Cod')\n                            </code>\n                        </pre>\n                        <button id=\"copy-button\" >\n                            Copy\n                        </button>\n                    </div>\n                </div>\n                In the final part, after to calculate the CPI per region, it is necessary make a weighted average to get the general CPI.\n                So, the next method query the region weights.\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                            <code code id=\"code\" class=\"language-python\">   \n                            def RegWei(self) -> None:\n        \n                                query = f'SELECT a.RegWei, b.RegWei, c.RegWei, d.RegWei, e.RegWei, f.RegWei, g.RegWei, h.RegWei \\\n                                        FROM DB1.dbo.REGINF a \\\n                                        INNER JOIN DB2.dbo.REGINF b ON a.RegCod != b.RegCod\\\n                                        INNER JOIN DB3.dbo.REGINF c ON a.RegCod != c.RegCod\\\n                                        INNER JOIN DB4.dbo.REGINF d ON a.RegCod != d.RegCod\\\n                                        INNER JOIN DB5.dbo.REGINF e ON a.RegCod != e.RegCod\\\n                                        INNER JOIN DB6.dbo.REGINF f ON a.RegCod != f.RegCod\\\n                                        INNER JOIN DB7.dbo.REGINF g ON a.RegCod != g.RegCod\\\n                                        INNER JOIN DB8.dbo.REGINF h ON a.RegCod != h.RegCod'            \n                                self.regwei = pd.read_sql(query, self.connect('master'))\n                            </code>\n                        </pre>\n                        <button id=\"copy-button\" >\n                            Copy\n                        </button>\n                    </div>\n                </div>\n                <p>This function join and align the category indices of all regions using the its dataframe index (codes).</p>\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                            <code code id=\"code\" class=\"language-python\">   \n                            def joinAndAlign(self, df1 : pd.DataFrame, df2 : pd.DataFrame):\n                                df1 = df1.merge(df2, how='outer', left_index=True, right_index=True,)\n                                return df1    \n                            </code>\n                        </pre>\n                        <button id=\"copy-button\" >\n                            Copy\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n            <div id=\"section4\">\n                <h2>Variations</h2>\n                <p>The variation of an article for {{'$a$'}} in the current period {{'$t$'}}, current month, for the source {{'$s$'}} is:</p>                \n                <p style=\"text-align:center\">{{'$V_{s,a,t} =\\\\frac{P_t Q_{t-1}}{P_{t-1} Q_t}$'}}</p>\n                <ol>\n                    <li>\n                        Variations with <b>change reference</b> {{\"ArtCR $=$ 'SI'\"}} must be replaced by {{\"$1,0$\"}}\n                    </li>                        \n                    <li>\n                        Variations whose value is undefined must be replaced by {{\"$1,0$\"}}\n                    </li>                        \n                </ol>\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                            <code code id=\"code\" class=\"language-python\">   \n                            def Variations(self, year : int, month : int, region : int) -> None:\n        \n                                query = f\"SELECT ArtCod, PrePri,CurPri,PreQua,CurQua,ArtCR FROM DB&#123;region&#125;.dbo.PRICES\\\n                                    WHERE YEAR = &#123;year&#125; AND MONTH = &#123;month&#125; \\\n                                    ORDER BY ArtCod\"\n                                temp = pd.read_sql(query, self.connect('master'), index_col='ArtCod')\n                                temp['Variation'] = (temp['CurPri']*temp['PreQua'])/(temp['PrePri']*temp['CurQua'])\n                                temp.loc[temp['ArtCR'] == 'S', 'Variation'] = 1.0\n                                self.variations = temp['Variation'].replace([np.nan,np.inf],1.0).to_frame()\n                              \n                            </code>\n                        </pre>\n                        <button id=\"copy-button\" >\n                            Copy\n                        </button>\n                    </div>\n                </div>\n            </div>\n            \n            <div id=\"section5\">\n                <h2>\n                    F. Variations\n                </h2>\n                <p>The index of one article is called flexible variation. The flexible variation of one article is:</p>\n                <p style=\"text-align: center;\">{{'$V_a = \\\\prod_{s=1}^n V_{s,a,t}$  raised to the  $\\\\frac{1}{nm}$ power.'}}</p>                \n                <p>\n                    where {{'$m$'}} is periodicity \n                    of the article, {{'$n$'}} the number of sources and {{'$V_{s,a,t}$'}} is the variation of the article {{'$a$'}} for the\n                    source {{'$s$'}} in the current month {{'$i$'}}.\n                </p>\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                            <code code id=\"code\" class=\"language-python\">   \n                            def VarFlex(self) -> None:     \n\n                                groupBy = self.variations.groupby(self.variations.index)     \n                                df = pd.DataFrame(columns=['ArtInd'], index=groupBy.groups.keys())\n                                self.periods['ArtPRC'] = self.periods['ArtPRC'].astype(float)\n                                for index in self.codes['Art'].index:\n                                    period = self.periods.loc[index][0] \n                                    try:\n                                        arreglo = groupBy.get_group(index)['Variation']\n                                        df.loc[index]['ArtInd'] = sp.gmean(arreglo)**(1/period)\n                                    except KeyError:\n                                        pass\n                                self.indcat = df \n                            </code>\n                        </pre>\n                        <button id=\"copy-button\" >\n                            Copy\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n            <div id=\"section6\">\n                <h2>Category Indices</h2>\n                <p>The indices of the next category can be calculate using:</p>\n                <p style=\"text-align: center;\">\n                    {{'$ R_{GB} = \\\\vec{\\\\alpha} \\\\cdot \\\\vec{V} $'}}\n                </p>\n                <p>\n                    where {{'$\\\\vec{\\\\alpha}$'}} is the weight vector, {{'$\\\\vec{V}$'}} is the vector of indices and {{'$ R_{GB}$'}} \n                    the relative index. To get the true index is necessary multiply by {{'$I_{GB}(t-1)$'}}, the corresponding index of the\n                    previous month:\n                </p>\n                <p style=\"text-align: center;\">\n                    {{'$I_{GB}(t)= R_{GB} \\\\times I_{GB}(t-1)$'}}    \n                </p>\n                <p>So, in this instance, the below method calculate the relative.</p>\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                            <code code id=\"code\" class=\"language-python\"> \n                            def IndCat(self, codInf : str, codSup : str, region : int) -> None:  \n\n                                union = self.indcat.merge(self.catwei[codInf]['R'+str(region)], how='inner', left_index=True, right_index=True,)        \n                                groupBy = union.groupby(union.index.str[:self.lencodes[codSup]]).apply(lambda x: (x[codInf+'Ind']*(x['R'+str(region)]/x['R'+str(region)].sum())).sum())\n                                df = pd.DataFrame(columns=[codSup+'Ind'], index=self.codes[codSup].index)\n                                df.loc[groupBy.index,codSup+'Ind'] = groupBy\n                                self.indcat = df\n                            </code>\n                        </pre>\n                        <button id=\"copy-button\" >\n                            Copy\n                        </button>\n                    </div>\n                </div>\n\n                <p>And this method query the index in the month {{'$t-1$'}}</p>\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                            <code code id=\"code\" class=\"language-python\"> \n                            def IndAnt(self, year : int, month : int, cod : str) -> None:\n\n                                query = f'SELECT a.&#123;cod&#125;Cod, a.&#123;cod&#125;Ind, b.&#123;cod&#125;Ind, c.&#123;cod&#125;Ind, d.&#123;cod&#125;Ind, e&#123;cod&#125;Ind, f.&#123;cod&#125;Ind, g&#123;cod&#125;Ind, h.&#123;cod&#125;Ind \\\n                                    FROM (SELECT &#123;cod&#125;Cod, &#123;cod&#125;Ind FROM DB1.dbo.INDICES&#123;self.di[cod]&#125; \\\n                                    WHERE YEAR = &#123;year&#125; AND MONTH = &#123;month&#125;) a \\\n                                    FULL OUTER JOIN (SELECT &#123;cod&#125;Cod, &#123;cod&#125;Ind FROM DB2.dbo.INDICES&#123;self.di[cod]&#125; \\\n                                    WHERE YEAR = &#123;year&#125; AND MONTH = &#123;month&#125;) b ON a.&#123;cod&#123;Cod = b.&#123;cod&#125;Cod\\\n                                    FULL OUTER JOIN (SELECT &#123;cod&#125;Cod, &#123;cod&#125;Ind FROM DB3.dbo.INDICES&#123;self.di[cod]&#125; \\\n                                    WHERE YEAR = &#123;year&#125; AND MONTH = &#123;month&#125;) c ON a.&#123;cod&#125;Cod = c.&#123;cod&#125;Cod\\\n                                    FULL OUTER JOIN (SELECT &#123;cod&#125;Cod, &#123;cod&#125;Ind FROM DB4.dbo.INDICES&#123;self.di[cod]&#125; WHERE YEAR = &#123;year&#125; AND MONTH = &#123;month&#125;) d ON a.&#123;cod&#125;Cod = d.&#123;cod&#125;Cod\\\n                                    FULL OUTER JOIN (SELECT &#123;cod&#125;Cod, &#123;cod&#125;Ind FROM DB5.dbo.INDICES&#123;self.di[cod]&#125; WHERE YEAR = &#123;year&#125; AND MONTH = &#123;month&#125;) e ON a.&#123;cod&#125;Cod = e.&#123;cod&#125;Cod\\\n                                    FULL OUTER JOIN (SELECT &#123;cod&#125;Cod, &#123;cod&#125;Ind FROM DB6.dbo.INDICES&#123;self.di[cod]&#125; WHERE YEAR = &#123;year&#125; AND MONTH = &#123;month&#125;) f ON a.&#123;cod&#125;Cod = f.&#123;cod&#125;Cod\\\n                                    FULL OUTER JOIN (SELECT &#123;cod&#125;Cod, &#123;cod&#125;Ind FROM DB7.dbo.INDICES&#123;self.di[cod]&#125; WHERE YEAR = &#123;year&#125; AND MONTH = &#123;month&#125;) g ON a.&#123;cod&#125;Cod = g.&#123;cod&#125;Cod\\\n                                    FULL OUTER JOIN (SELECT &#123;cod&#125;Cod, &#123;cod&#125;Ind FROM DB8.dbo.INDICES&#123;self.di[cod]&#125; WHERE YEAR = &#123;year&#125; AND MONTH = &#123;month&#125;) h ON a.&#123;cod&#125;Cod = h.&#123;cod&#125;Cod'\n                                self.indant = pd.read_sql(query, self.connect('master'), index_col=cod+'Cod')\n                            </code>\n                        </pre>\n                        <button id=\"copy-button\" >\n                            Copy\n                        </button>\n                    </div>\n                </div>                \n            </div>\n\n            <div id=\"section7\">\n                <h2>Consumer Price Index</h2>\n                <p>Now there is an object with the capacity to calculate the CPI. The last method is the builder that use all previous methods. </p>\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                            <code code id=\"code\" class=\"language-python\"> \n                            def Builder(self,year : int, month : int) -> None:\n\n                                #Ponderaciones de todas las categorías\n                                self.CatWei('Art')\n                                self.CatWei('Gba')\n                                self.CatWei('Div')\n                                #códigos de todas las categorías\n                                self.Codes('Art')\n                                self.Codes('Gba')\n                                self.Codes('Div')\n                                #Obtenemos los índices del month anterior\n                                if month == 1:\n                                    self.IndAnt(year - 1, 12, 'Gba')\n                                else:\n                                    self.IndAnt(year, month - 1, 'Gba')\n                                for i in range(1,9):     \n                                    self.Variations(year, month, i)\n                                    \n                                    #-------------------------------------------------------------------\n                                    self.Periods(i)\n                                    self.VarFlex()\n                                    self.IndCat('Art','Gba', i)\n                                    if i == 1:\n                                        df = self.indcat.copy()\n                                    else:\n                                        df = self.joinAndAlign(df, self.indcat.copy())\n                                indact = np.multiply(df,self.indant).replace(np.nan,0.0)\n                                idiv = indact.groupby(indact.index.str[:self.lencodes['Div']]).sum()\n                                #continuar con las ponderaciones, pero dentro del ciclo\n                                cpiR = np.multiply(idiv, self.catwei['Div']).sum()/100\n                                print(round(np.dot(cpiR,self.regwei.loc[0])/100,4))\n                            </code>\n                        </pre>\n                        <button id=\"copy-button\" >\n                            Copy\n                        </button>\n                    </div>\n                </div>                \n                <p>Finally create an instance of CPI, this takes credentials from console, called \"temp\" and execute builder method.</p>\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                            <code code id=\"code\" class=\"language-python\"> \n                            temp = CPI(sys.argv[1],sys.argv[2], sys.argv[3])\n                            temp.Builder(int(sys.argv[4]),int(sys.argv[5]))\n                            </code>\n                        </pre>\n                        <button id=\"copy-button\" >\n                            Copy\n                        </button>\n                    </div>\n                </div>    \n\n\n            </div>\n\n        </div>\n    </div>\n</body>\n\n</html>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}