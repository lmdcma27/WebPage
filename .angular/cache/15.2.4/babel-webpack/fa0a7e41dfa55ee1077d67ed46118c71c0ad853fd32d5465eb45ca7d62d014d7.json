{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../header/header.component\";\nimport * as i2 from \"../table-of-contents/table-of-contents.component\";\nexport let ElasticDockerComponent = /*#__PURE__*/(() => {\n  class ElasticDockerComponent {\n    constructor() {\n      this.tableOfContents = [['section1', 'Introduction'], ['section2', 'Docker compose file'], ['section3', 'Connection'], ['section4', 'Indices and snapshots'], ['section5', 'Restore indices from snapshots']];\n    }\n    ngOnInit() {\n      this.loadScript('./assets/prism.js', 'js');\n      window.onload = () => {\n        this.loadScript('./assets/main.js', 'js');\n      };\n    }\n    loadScript(scriptUrl, Tipo) {\n      if (Tipo == 'js') {\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = scriptUrl;\n        document.body.appendChild(script);\n      } else if (Tipo === 'css') {\n        const link = document.createElement('link');\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = scriptUrl;\n        document.head.appendChild(link);\n      }\n    }\n    scrollToSection(elementId) {\n      const elementToScrollTo = document.getElementById(elementId);\n      if (elementToScrollTo) {\n        elementToScrollTo.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }\n    }\n  }\n  ElasticDockerComponent.ɵfac = function ElasticDockerComponent_Factory(t) {\n    return new (t || ElasticDockerComponent)();\n  };\n  ElasticDockerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ElasticDockerComponent,\n    selectors: [[\"app-elastic-docker\"]],\n    decls: 119,\n    vars: 1,\n    consts: [[\"lang\", \"en\"], [\"charset\", \"UTF-8\"], [\"http-equiv\", \"X-UA-Compatible\", \"content\", \"IE=edge\"], [\"name\", \"viewport\", \"content\", \"width=device-width, initial-scale=1.0\"], [1, \"global\"], [1, \"toc\"], [3, \"tableOfContents\", \"scrollToElement\"], [1, \"content\"], [\"id\", \"section1\"], [\"href\", \"https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html\"], [\"id\", \"section2\"], [1, \"container\"], [1, \"code-wrapper\"], [\"code\", \"\", \"id\", \"code\", 1, \"language-python\"], [\"id\", \"copy-button\"], [\"id\", \"section3\"], [\"src\", \"./assets/images/elasticdocker/pastetoken.png\", \"alt\", \"\", 2, \"display\", \"block\", \"margin-left\", \"auto\", \"margin-right\", \"auto\"], [\"src\", \"./assets/images/elasticdocker/codeverification.png\", \"alt\", \"\", 2, \"display\", \"block\", \"margin-left\", \"auto\", \"margin-right\", \"auto\"], [\"src\", \"./assets/images/elasticdocker/apikey.png\", \"alt\", \"\", 2, \"display\", \"block\", \"margin-left\", \"auto\", \"margin-right\", \"auto\"], [\"id\", \"section4\"], [\"id\", \"section5\"]],\n    template: function ElasticDockerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"html\", 0)(1, \"head\");\n        i0.ɵɵelement(2, \"meta\", 1)(3, \"meta\", 2)(4, \"meta\", 3);\n        i0.ɵɵelementStart(5, \"title\");\n        i0.ɵɵtext(6, \"Document\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"body\");\n        i0.ɵɵelement(8, \"app-header\");\n        i0.ɵɵelementStart(9, \"div\", 4)(10, \"div\", 5)(11, \"app-table-of-contents\", 6);\n        i0.ɵɵlistener(\"scrollToElement\", function ElasticDockerComponent_Template_app_table_of_contents_scrollToElement_11_listener($event) {\n          return ctx.scrollToSection($event);\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"div\", 7)(13, \"div\", 8)(14, \"h2\");\n        i0.ɵɵtext(15, \"Introduction\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"p\");\n        i0.ɵɵtext(17, \" This time we going to create a ElasticSeach (ES) instance using docker, learn how to push our data in ES indices and how to make snapshots (backups) in a local binding folder. Finally we'll restore the example indices in another ES instance. For more details see \");\n        i0.ɵɵelementStart(18, \"a\", 9);\n        i0.ɵɵtext(19, \"ElasticSearch\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(20, \". \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(21, \"div\", 10)(22, \"h2\");\n        i0.ɵɵtext(23, \"Docker compose file\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"p\");\n        i0.ɵɵtext(25, \"The first thing to do is create the instance copy and paste the code below into a yaml file callled 'docker-compose.yaml', or '.yml'.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"div\", 11)(27, \"div\", 12)(28, \"pre\");\n        i0.ɵɵtext(29, \"                            \");\n        i0.ɵɵelementStart(30, \"code\", 13);\n        i0.ɵɵtext(31, \"   \\n                                                version: '3.9'\\n                                                services:\\n                                                    es01:\\n                                                        container_name: es01\\n                                                        image: docker.elastic.co/elasticsearch/elasticsearch:8.8.2\\n                                                        environment: \\n                                                            - discovery.type=single-node\\n                                                            - path.repo=/usr/share/elasticsearch/backups\\n                                                        restart: always\\n                                                        ports:\\n                                                            - 9200:9200\\n                                                        networks:\\n                                                            - elastic\\n                                                        volumes:\\n                                                            - es_data:/usr/share/elasticsearch/data\\n                                                            - ./backups:/usr/share/elasticsearch/backups\\n\\n                                                    kibana:\\n                                                        container_name: kibana\\n                                                        image: docker.elastic.co/kibana/kibana:8.8.2\\n                                                        restart: always\\n                                                        ports:\\n                                                            - 5601:5601\\n                                                        networks:\\n                                                            - elastic\\n\\n                                                volumes:\\n                                                    es_data:\\n                                                networks:\\n                                                    elastic:\\n                            \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(32, \"\\n                        \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(33, \"button\", 14);\n        i0.ɵɵtext(34, \" Copy \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtext(35, \" When the building of the container has finished, we find a folder called 'backups' beside we docker-compose.yaml file \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(36, \"div\", 15)(37, \"h2\");\n        i0.ɵɵtext(38, \"Connection\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(39, \"p\");\n        i0.ɵɵtext(40, \" The connection will be with python using the library elasticsearch, the '7.13.4' version works fine. We can install it in our python environment: \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(41, \"div\", 11)(42, \"div\", 12)(43, \"pre\");\n        i0.ɵɵtext(44, \"                            \");\n        i0.ɵɵelementStart(45, \"code\", 13);\n        i0.ɵɵtext(46, \"   \\n                                pip install elasticsearch==7.13.4   \\n                            \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(47, \"\\n                        \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(48, \"button\", 14);\n        i0.ɵɵtext(49, \" Copy \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtext(50, \" Before the connection, we need the token, password and api key. In your terminal, for the token run: \");\n        i0.ɵɵelementStart(51, \"div\", 11)(52, \"div\", 12)(53, \"pre\");\n        i0.ɵɵtext(54, \"                            \");\n        i0.ɵɵelementStart(55, \"code\", 13);\n        i0.ɵɵtext(56, \"   \\n                                sudo docker exec -it es01 /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s kibana\\n                            \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(57, \"\\n                        \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(58, \"button\", 14);\n        i0.ɵɵtext(59, \" Copy \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtext(60, \" and for the password: \");\n        i0.ɵɵelementStart(61, \"div\", 11)(62, \"div\", 12)(63, \"pre\");\n        i0.ɵɵtext(64, \"                            \");\n        i0.ɵɵelementStart(65, \"code\", 13);\n        i0.ɵɵtext(66, \"   \\n                                sudo docker exec -it es01 /usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic\\n                            \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(67, \"\\n                        \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(68, \"button\", 14);\n        i0.ɵɵtext(69, \" Copy \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtext(70, \" then enter 'y' in the terminal. \");\n        i0.ɵɵelement(71, \"br\");\n        i0.ɵɵelementStart(72, \"p\");\n        i0.ɵɵtext(73, \" Now, in the 'localhost:5601' we can paste the required token. Kibana gives a verification code of 6 digits and we can get from terminal keyboarding 'docker logs kibana' . After that, login with your password and user 'elastic' \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(74, \"img\", 16)(75, \"img\", 17);\n        i0.ɵɵelementStart(76, \"p\");\n        i0.ɵɵtext(77, \" Once in the kibana interface, find the endpoint 'http://localhost:5601/app/management/security/api_keys/', click on 'Create API key' button, assign a name and copy as json.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(78, \"img\", 18);\n        i0.ɵɵelementStart(79, \"p\");\n        i0.ɵɵtext(80, \" The connection function is \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(81, \"div\", 11)(82, \"div\", 12)(83, \"pre\");\n        i0.ɵɵtext(84, \"                                \");\n        i0.ɵɵelementStart(85, \"code\", 13);\n        i0.ɵɵtext(86, \" \\n                                    from elasticsearch import Elasticsearch\\n                                    import warnings\\n                                    warnings.filterwarnings(\\\"ignore\\\")    \\n                                    def Connection(es_host:str,es_user:str,es_password:str,api_key:tuple):\\n                                        es = Elasticsearch( hosts=[es_host],\\n                                                            basic_auth=(es_user, es_password), \\n                                                            verify_certs=False,\\n                                                            api_key=api_key\\n                                        )\\n                                        return es                \\n                                \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(87, \"\\n                            \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(88, \"button\", 14);\n        i0.ɵɵtext(89, \" Copy \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(90, \"p\");\n        i0.ɵɵtext(91, \"So, we can verify the connection\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(92, \"div\", 11)(93, \"div\", 12)(94, \"pre\");\n        i0.ɵɵtext(95, \"                                \");\n        i0.ɵɵelementStart(96, \"code\", 13);\n        i0.ɵɵtext(97, \"   \\n                                    api_key=('api_id','api_key')\\n                                    es=Connection('https://localhost:9200/','elastic','Z61Glr+44RZrIMBQ45zI',api_key)\\n                                    print(es.info())\\n                                \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(98, \"\\n                            \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(99, \"button\", 14);\n        i0.ɵɵtext(100, \" Copy \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtext(101, \" and get something like this \");\n        i0.ɵɵelementStart(102, \"div\", 11)(103, \"div\", 12)(104, \"pre\");\n        i0.ɵɵtext(105, \"                                \");\n        i0.ɵɵelementStart(106, \"code\", 13);\n        i0.ɵɵtext(107, \"   \\n                                    {'name': '349860b1705d', \\n                                          'cluster_name': 'docker-cluster', \\n                                          'cluster_uuid': 'ChyUT4WjR4GJ9S3fcqsMZQ', \\n                                          'version': {'number': '8.8.2', \\n                                            'build_flavor': 'default', \\n                                            'build_type': 'docker', \\n                                            'build_hash': '98e1271edf932a480e4262a471281f1ee295ce6b', \\n                                            'build_date': '2023-06-26T05:16:16.196344851Z', \\n                                            'build_snapshot': False, 'lucene_version': '9.6.0', \\n                                            'minimum_wire_compatibility_version': '7.17.0', \\n                                            'minimum_index_compatibility_version': '7.0.0'\\n                                            }, \\n                                          'tagline': 'You Know, for Search'\\n                                    }\\n                                \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(108, \"\\n                            \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(109, \"button\", 14);\n        i0.ɵɵtext(110, \" Copy \");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(111, \"div\", 19)(112, \"h2\");\n        i0.ɵɵtext(113, \"Indices and snapshots\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(114, \"p\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(115, \"div\", 20)(116, \"h2\");\n        i0.ɵɵtext(117, \"Restore indices from snapshots\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(118, \"p\");\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"tableOfContents\", ctx.tableOfContents);\n      }\n    },\n    dependencies: [i1.HeaderComponent, i2.TableOfContentsComponent],\n    styles: [\".global[_ngcontent-%COMP%]{display:flex;flex-direction:row;width:100%;height:90vh;background-color:#000;position:relative}.toc[_ngcontent-%COMP%]{display:flex;flex:1.1}.content[_ngcontent-%COMP%]{padding:2.1%;flex:3.5;border-style:groove;border-color:gray;border-top-right-radius:20px;border-bottom-right-radius:20px;background-color:#fff;overflow-y:scroll}ul[_ngcontent-%COMP%]{list-style:none;padding:0;margin:0}li[_ngcontent-%COMP%]{margin-top:8%}a[_ngcontent-%COMP%]{text-decoration:none;color:gray}a[_ngcontent-%COMP%]:hover{-webkit-text-decoration:solid;text-decoration:solid}a[href^=\\\"#\\\"][_ngcontent-%COMP%]{transition-duration:10000s}#section1[_ngcontent-%COMP%], #section2[_ngcontent-%COMP%], #section3[_ngcontent-%COMP%], #section4[_ngcontent-%COMP%], #section5[_ngcontent-%COMP%], #section6[_ngcontent-%COMP%], #section7[_ngcontent-%COMP%], #section8[_ngcontent-%COMP%]{padding:20px;margin-bottom:20px}.container[_ngcontent-%COMP%]{width:90%;height:100%;overflow:auto;border-radius:12px;margin-left:10%}[language-python^=\\\"[_ngcontent-%COMP%]{{ }}\\\"][_ngcontent-%COMP%]{display:none}.code-wrapper[_ngcontent-%COMP%]{position:relative}#copy-button[_ngcontent-%COMP%]{position:absolute;top:8px;right:8px;padding:7px;background-color:#2d2d2d;outline:none;color:#fff;border-radius:8px;cursor:pointer;transition:all .2s ease-in;opacity:0;border:1px solid antiquewhite}#copy-button.show-msg[_ngcontent-%COMP%]{display:none}#copy-button[_ngcontent-%COMP%]:hover{background-color:#423e3e}.code-wrapper[_ngcontent-%COMP%]:hover   #copy-button[_ngcontent-%COMP%]{opacity:1}p[_ngcontent-%COMP%]{text-indent:2em}\"]\n  });\n  return ElasticDockerComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}