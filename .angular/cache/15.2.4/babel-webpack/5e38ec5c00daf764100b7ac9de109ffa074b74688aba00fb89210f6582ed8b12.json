{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../header/header.component\";\nimport * as i2 from \"../table-of-contents/table-of-contents.component\";\nexport class ElasticDockerComponent {\n  constructor() {\n    this.tableOfContents = [['section1', 'Introduction'], ['section2', 'Docker compose file'], ['section3', 'Connection'], ['section4', 'Indices and snapshots'], ['section5', 'Restore indices from snapshots']];\n  }\n  ngOnInit() {\n    this.loadScript('./assets/prism.js', 'js');\n    window.onload = () => {\n      this.loadScript('./assets/main.js', 'js');\n    };\n  }\n  loadScript(scriptUrl, Tipo) {\n    if (Tipo == 'js') {\n      const script = document.createElement('script');\n      script.type = 'text/javascript';\n      script.src = scriptUrl;\n      document.body.appendChild(script);\n    } else if (Tipo === 'css') {\n      const link = document.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      link.href = scriptUrl;\n      document.head.appendChild(link);\n    }\n  }\n  scrollToSection(elementId) {\n    const elementToScrollTo = document.getElementById(elementId);\n    if (elementToScrollTo) {\n      elementToScrollTo.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }\n}\nElasticDockerComponent.ɵfac = function ElasticDockerComponent_Factory(t) {\n  return new (t || ElasticDockerComponent)();\n};\nElasticDockerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ElasticDockerComponent,\n  selectors: [[\"app-elastic-docker\"]],\n  decls: 221,\n  vars: 1,\n  consts: [[\"lang\", \"en\"], [\"charset\", \"UTF-8\"], [\"http-equiv\", \"X-UA-Compatible\", \"content\", \"IE=edge\"], [\"name\", \"viewport\", \"content\", \"width=device-width, initial-scale=1.0\"], [1, \"global\"], [1, \"toc\"], [3, \"tableOfContents\", \"scrollToElement\"], [1, \"content\"], [\"id\", \"section1\"], [\"href\", \"https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html\"], [\"href\", \"https://github.com/lmdcma27/elastic-docker\", \"target\", \"_blank\", 2, \"color\", \"green\"], [\"id\", \"section2\"], [1, \"container\"], [1, \"code-wrapper\"], [\"code\", \"\", \"id\", \"code\", 1, \"language-python\"], [\"id\", \"copy-button\"], [\"id\", \"section3\"], [\"src\", \"./assets/images/elasticdocker/pastetoken.png\", \"alt\", \"\", 2, \"display\", \"block\", \"margin-left\", \"auto\", \"margin-right\", \"auto\"], [\"src\", \"./assets/images/elasticdocker/codeverification.png\", \"alt\", \"\", 2, \"display\", \"block\", \"margin-left\", \"auto\", \"margin-right\", \"auto\"], [\"src\", \"./assets/images/elasticdocker/apikey.png\", \"alt\", \"\", 2, \"display\", \"block\", \"margin-left\", \"auto\", \"margin-right\", \"auto\"], [\"id\", \"section4\"], [\"href\", \"https://elasticsearch-py.readthedocs.io/en/v8.10.1/\"], [\"id\", \"section5\"]],\n  template: function ElasticDockerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"html\", 0)(1, \"head\");\n      i0.ɵɵelement(2, \"meta\", 1)(3, \"meta\", 2)(4, \"meta\", 3);\n      i0.ɵɵelementStart(5, \"title\");\n      i0.ɵɵtext(6, \"Document\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(7, \"body\");\n      i0.ɵɵelement(8, \"app-header\");\n      i0.ɵɵelementStart(9, \"div\", 4)(10, \"div\", 5)(11, \"app-table-of-contents\", 6);\n      i0.ɵɵlistener(\"scrollToElement\", function ElasticDockerComponent_Template_app_table_of_contents_scrollToElement_11_listener($event) {\n        return ctx.scrollToSection($event);\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"div\", 7)(13, \"div\", 8)(14, \"h2\");\n      i0.ɵɵtext(15, \"Introduction\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"p\");\n      i0.ɵɵtext(17, \" This time we going to create a ElasticSeach (ES) instance using docker, learn how to push our data in ES indices and how to make snapshots (backups) in a local binding folder. Finally we'll restore the example indices in another ES instance. For more details see \");\n      i0.ɵɵelementStart(18, \"a\", 9);\n      i0.ɵɵtext(19, \"ElasticSearch \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(20, \". All source code is in the \");\n      i0.ɵɵelementStart(21, \"a\", 10);\n      i0.ɵɵtext(22, \"github repository\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(23, \"div\", 11)(24, \"h2\");\n      i0.ɵɵtext(25, \"Docker compose file\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(26, \"p\");\n      i0.ɵɵtext(27, \"The first thing to do is create the instance copy and paste the code below into a yaml file callled 'docker-compose.yaml', or '.yml'.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(28, \"div\", 12)(29, \"div\", 13)(30, \"pre\");\n      i0.ɵɵtext(31, \"                            \");\n      i0.ɵɵelementStart(32, \"code\", 14);\n      i0.ɵɵtext(33, \"   \\n                                                version: '3.9'\\n                                                services:\\n                                                    es01:\\n                                                        container_name: es01\\n                                                        image: docker.elastic.co/elasticsearch/elasticsearch:8.8.2\\n                                                        environment: \\n                                                            - discovery.type=single-node\\n                                                            - path.repo=/usr/share/elasticsearch/backups\\n                                                        restart: always\\n                                                        ports:\\n                                                            - 9200:9200\\n                                                        networks:\\n                                                            - elastic\\n                                                        volumes:\\n                                                            - es_data:/usr/share/elasticsearch/data\\n                                                            - ./backups:/usr/share/elasticsearch/backups\\n\\n                                                    kibana:\\n                                                        container_name: kibana\\n                                                        image: docker.elastic.co/kibana/kibana:8.8.2\\n                                                        restart: always\\n                                                        ports:\\n                                                            - 5601:5601\\n                                                        networks:\\n                                                            - elastic\\n\\n                                                volumes:\\n                                                    es_data:\\n                                                networks:\\n                                                    elastic:\\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(34, \"\\n                        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(35, \"button\", 15);\n      i0.ɵɵtext(36, \" Copy \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵtext(37, \" When the building of the container has finished, we find a folder called 'backups' beside we docker-compose.yaml file \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(38, \"div\", 16)(39, \"h2\");\n      i0.ɵɵtext(40, \"Connection\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(41, \"p\");\n      i0.ɵɵtext(42, \" The connection will be with python using the library elasticsearch, the '7.13.4' version works fine. We can install it in our python environment: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(43, \"div\", 12)(44, \"div\", 13)(45, \"pre\");\n      i0.ɵɵtext(46, \"                            \");\n      i0.ɵɵelementStart(47, \"code\", 14);\n      i0.ɵɵtext(48, \"   \\n                                pip install elasticsearch==7.13.4   \\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(49, \"\\n                        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(50, \"button\", 15);\n      i0.ɵɵtext(51, \" Copy \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵtext(52, \" Before the connection, we need the token, password and api key. Open terminal, for the token run: \");\n      i0.ɵɵelementStart(53, \"div\", 12)(54, \"div\", 13)(55, \"pre\");\n      i0.ɵɵtext(56, \"                            \");\n      i0.ɵɵelementStart(57, \"code\", 14);\n      i0.ɵɵtext(58, \"   \\n                                sudo docker exec -it es01 /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s kibana\\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(59, \"\\n                        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(60, \"button\", 15);\n      i0.ɵɵtext(61, \" Copy \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵtext(62, \" and for the password: \");\n      i0.ɵɵelementStart(63, \"div\", 12)(64, \"div\", 13)(65, \"pre\");\n      i0.ɵɵtext(66, \"                            \");\n      i0.ɵɵelementStart(67, \"code\", 14);\n      i0.ɵɵtext(68, \"   \\n                                sudo docker exec -it es01 /usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic\\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(69, \"\\n                        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(70, \"button\", 15);\n      i0.ɵɵtext(71, \" Copy \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵtext(72, \" then enter 'y' in the terminal. \");\n      i0.ɵɵelement(73, \"br\");\n      i0.ɵɵelementStart(74, \"p\");\n      i0.ɵɵtext(75, \" Now, in the 'localhost:5601' we can paste the required token. Kibana gives a verification code of 6 digits and we can get from terminal keyboarding 'docker logs kibana' . After that, we login with password and user 'elastic' \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(76, \"img\", 17)(77, \"img\", 18);\n      i0.ɵɵelementStart(78, \"p\");\n      i0.ɵɵtext(79, \" Once in kibana interface, go to the endpoint 'http://localhost:5601/app/management/security/api_keys/', click on 'Create API key' button, assign a name and copy as json.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(80, \"img\", 19);\n      i0.ɵɵelementStart(81, \"p\");\n      i0.ɵɵtext(82, \" The connection function is \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(83, \"div\", 12)(84, \"div\", 13)(85, \"pre\");\n      i0.ɵɵtext(86, \"                                \");\n      i0.ɵɵelementStart(87, \"code\", 14);\n      i0.ɵɵtext(88, \" \\n                                    from elasticsearch import Elasticsearch\\n                                    import warnings\\n                                    warnings.filterwarnings(\\\"ignore\\\")    \\n                                    def Connection(es_host:str,es_user:str,es_password:str,api_key:tuple):\\n                                        es = Elasticsearch( hosts=[es_host],\\n                                                            basic_auth=(es_user, es_password), \\n                                                            verify_certs=False,\\n                                                            api_key=api_key\\n                                        )\\n                                        return es                \\n                                \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(89, \"\\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(90, \"button\", 15);\n      i0.ɵɵtext(91, \" Copy \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(92, \"p\");\n      i0.ɵɵtext(93, \"So, we can verify the connection\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(94, \"div\", 12)(95, \"div\", 13)(96, \"pre\");\n      i0.ɵɵtext(97, \"                                \");\n      i0.ɵɵelementStart(98, \"code\", 14);\n      i0.ɵɵtext(99, \"   \\n                                    api_key=('api_id','api_key')\\n                                    es=Connection('https://localhost:9200/','elastic','password',api_key)\\n                                    print(es.info())\\n                                \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(100, \"\\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(101, \"button\", 15);\n      i0.ɵɵtext(102, \" Copy \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵtext(103, \" and get something like this \");\n      i0.ɵɵelementStart(104, \"div\", 12)(105, \"div\", 13)(106, \"pre\");\n      i0.ɵɵtext(107, \"                                \");\n      i0.ɵɵelementStart(108, \"code\", 14);\n      i0.ɵɵtext(109, \"   \\n                                    {'name': '349860b1705d', \\n                                          'cluster_name': 'docker-cluster', \\n                                          'cluster_uuid': 'ChyUT4WjR4GJ9S3fcqsMZQ', \\n                                          'version': {'number': '8.8.2', \\n                                            'build_flavor': 'default', \\n                                            'build_type': 'docker', \\n                                            'build_hash': '98e1271edf932a480e4262a471281f1ee295ce6b', \\n                                            'build_date': '2023-06-26T05:16:16.196344851Z', \\n                                            'build_snapshot': False, 'lucene_version': '9.6.0', \\n                                            'minimum_wire_compatibility_version': '7.17.0', \\n                                            'minimum_index_compatibility_version': '7.0.0'\\n                                            }, \\n                                          'tagline': 'You Know, for Search'\\n                                    }\\n                                \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(110, \"\\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(111, \"button\", 15);\n      i0.ɵɵtext(112, \" Copy \");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(113, \"div\", 20)(114, \"h2\");\n      i0.ɵɵtext(115, \"Indices and snapshots\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(116, \"p\");\n      i0.ɵɵtext(117, \" To create a snapshot we first need a index to backup so, that's easy \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(118, \"div\", 12)(119, \"div\", 13)(120, \"pre\");\n      i0.ɵɵtext(121, \"                                \");\n      i0.ɵɵelementStart(122, \"code\", 14);\n      i0.ɵɵtext(123, \"   \\n                                def create_index(conn,name):\\n                                    if name in conn.indices.get('*').keys():\\n                                        print(\\\"This index already exists\\\")\\n                                    else:\\n                                        print(\\\"New index created\\\")  \\n                                        conn.indices.create(index=name) \\n                                create_index(es,'favorite_mangas')\\n                                \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(124, \"\\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(125, \"button\", 15);\n      i0.ɵɵtext(126, \" Copy \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵtext(127, \" Pushing some data to the new index. \");\n      i0.ɵɵelementStart(128, \"div\", 12)(129, \"div\", 13)(130, \"pre\");\n      i0.ɵɵtext(131, \"                            \");\n      i0.ɵɵelementStart(132, \"code\", 14);\n      i0.ɵɵtext(133, \"   \\n                                es.index(index='favorite_mangas',body={'Manga':'One Piece','Author':'Eiichiro Oda','Year':'1997'})\\n                                es.index(index='favorite_mangas',body={'Manga':'Hunter x Hunter','Author':'Yoshihiro Togashi ','Year':'1999'})\\n                                es.index(index='favorite_mangas',body={'Manga':'Naruto','Author':'Masashi Kishimoto','Year':'1998'})\\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(134, \"\\n                        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(135, \"button\", 15);\n      i0.ɵɵtext(136, \" Copy \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(137, \"p\");\n      i0.ɵɵtext(138, \" To create a snapshot it is necessary the repository name and the index name, the index name can be a indices list, but be carefull to change the snapshot name. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(139, \"p\");\n      i0.ɵɵtext(140, \" First the function to create the repository, note that the \\\"location\\\" parameter in the \\\"create_repository\\\" function is the path inside the docker container, the same used above in the docker compose file. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(141, \"div\", 12)(142, \"div\", 13)(143, \"pre\");\n      i0.ɵɵtext(144, \"                            \");\n      i0.ɵɵelementStart(145, \"code\", 14);\n      i0.ɵɵtext(146, \"   \\n                                def create_repository(conn, repository_name='my_fs_backup'):\\n                                    # Snapshot repository settings\\n                                    repository_type = 'fs'\\n                                    repository_settings = {            \\n                                        \\\"location\\\": \\\"/usr/share/elasticsearch/backups\\\",\\n                                        \\\"compress\\\": \\\"true\\\"\\n                                    }\\n                                    response = conn.snapshot.create_repository(repository_name, body={\\n                                        \\\"type\\\": repository_type,\\n                                        \\\"settings\\\": repository_settings\\n                                    }, request_timeout=30)\\n\\n                                    print(response)\\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(147, \"\\n                        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(148, \"button\", 15);\n      i0.ɵɵtext(149, \" Copy \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(150, \"p\");\n      i0.ɵɵtext(151, \" Next, the function that create the snapshot. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(152, \"div\", 12)(153, \"div\", 13)(154, \"pre\");\n      i0.ɵɵtext(155, \"                            \");\n      i0.ɵɵelementStart(156, \"code\", 14);\n      i0.ɵɵtext(157, \"   \\n                                def create_snapshot(conn,index_name):\\n                                \\n                                    repository_name = 'my_fs_backup' #Snapshot repository name\\n                                    snapshot_name = index_name+'_snapshot' # Replace with a suitable name for your snapshot\\n                                    try:\\n                                        response = conn.snapshot.create(repository=repository_name, snapshot=snapshot_name, body={\\n                                            \\\"indices\\\": index_name,\\n                                            \\\"include_global_state\\\": False\\n                                            }, request_timeout=300)\\n\\n                                        print(response)\\n                                    except:\\n                                        print(\\\"The index doesn't exists\\\")  \\n                                \\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(158, \"\\n                        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(159, \"button\", 15);\n      i0.ɵɵtext(160, \" Copy \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(161, \"div\", 12)(162, \"div\", 13)(163, \"pre\");\n      i0.ɵɵtext(164, \"                            \");\n      i0.ɵɵelementStart(165, \"code\", 14);\n      i0.ɵɵtext(166, \"   \\n                                create_repository(conn)\\n                                create_snapshot(conn,'favorite_mangas')                                                  \\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(167, \"\\n                        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(168, \"button\", 15);\n      i0.ɵɵtext(169, \" Copy \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(170, \"p\");\n      i0.ɵɵtext(171, \"Don't forget read the \");\n      i0.ɵɵelementStart(172, \"a\", 21);\n      i0.ɵɵtext(173, \"ES documentation for python\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(174, \"div\", 22)(175, \"h2\");\n      i0.ɵɵtext(176, \"Restoring indices from snapshots\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(177, \"p\");\n      i0.ɵɵtext(178, \" Finally, it is possible restore indices from snapshots. To do this we can delete docker-compose image using \\\"docker compose down -v\\\" in terminal, and repeat all steps until before creating a new index, that just take a few minutes and it's a good practice. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(179, \"p\");\n      i0.ɵɵtext(180, \" Before continue, here is a usefull list of function to list repositories, snapshots and indices in our instance. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(181, \"div\", 12)(182, \"div\", 13)(183, \"pre\");\n      i0.ɵɵtext(184, \"                            \");\n      i0.ɵɵelementStart(185, \"code\", 14);\n      i0.ɵɵtext(186, \"   \\n                                def list_repositories(conn):\\n                                    # List snapshot repositories\\n                                    repositories = conn.snapshot.get_repository()\\n                                    print(\\\"Snapshot Repositories:\\\")\\n                                    for repo_name in repositories:\\n                                        print(repo_name)      \\n                                            \\n                                def list_snapshots(conn):\\n                                    # List snapshots\\n                                    repository_name = 'my_fs_backup'\\n                                    snapshot_repository = conn.snapshot.get_repository(repository=repository_name)\\n                                    snapshot_repository_name = snapshot_repository[repository_name]['type']\\n\\n                                    snapshots = conn.snapshot.get(repository=repository_name, snapshot='_all')\\n                                    print(\\\"Snapshots:\\\")\\n                                    for snapshot in snapshots['snapshots']:\\n                                        print(snapshot['snapshot'])\\n                                        \\n                                def list_indices(conn):\\n                                    indices = conn.indices.get('*')\\n                                    print(\\\"Indices:\\\")\\n                                    print(indices.keys())    \\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(187, \"\\n                        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(188, \"button\", 15);\n      i0.ɵɵtext(189, \" Copy \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(190, \"p\");\n      i0.ɵɵtext(191, \" When a snapshot is restored it's necessary indicate a existing repository, don't forget. The code is as follow, first the restoring snapshot function \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(192, \"div\", 12)(193, \"div\", 13)(194, \"pre\");\n      i0.ɵɵtext(195, \"                            \");\n      i0.ɵɵelementStart(196, \"code\", 14);\n      i0.ɵɵtext(197, \"   \\n                                def restore_snapshot(conn,snapshot_name,index_name):\\n\\n                                    # Snapshot repository name\\n                                    repository_name = 'my_fs_backup'\\n                                        \\n                                    # Restore the snapshot\\n                                    response = conn.snapshot.restore(repository=repository_name, snapshot=snapshot_name, body={\\n                                        \\\"indices\\\": index_name\\n                                    }, request_timeout=300)\\n                                    print(response)\\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(198, \"\\n                        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(199, \"button\", 15);\n      i0.ɵɵtext(200, \" Copy \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(201, \"div\", 12)(202, \"div\", 13)(203, \"pre\");\n      i0.ɵɵtext(204, \"                            \");\n      i0.ɵɵelementStart(205, \"code\", 14);\n      i0.ɵɵtext(206, \"   \\n                                create_repository()\\n                                restore_snapshot(es,'favorite_mangas_snapshot','favorite_mangas_restored')\\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(207, \"\\n                        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(208, \"button\", 15);\n      i0.ɵɵtext(209, \" Copy \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(210, \"p\");\n      i0.ɵɵtext(211, \"The last part is query the info in the 'favorite_mangas_restored' index, we can try\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(212, \"div\", 12)(213, \"div\", 13)(214, \"pre\");\n      i0.ɵɵtext(215, \"                            \");\n      i0.ɵɵelementStart(216, \"code\", 14);\n      i0.ɵɵtext(217, \"   \\n                                result=es.search(index='my_first_index',body={'query':{'match_all':{}}} )\\n                                for register in result['hits']['hits']:\\n                                    print(register['_source'])\\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(218, \"\\n                        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(219, \"button\", 15);\n      i0.ɵɵtext(220, \" Copy \");\n      i0.ɵɵelementEnd()()()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(11);\n      i0.ɵɵproperty(\"tableOfContents\", ctx.tableOfContents);\n    }\n  },\n  dependencies: [i1.HeaderComponent, i2.TableOfContentsComponent],\n  styles: [\".global[_ngcontent-%COMP%] {\\n        display: flex;\\n        flex-direction: row;\\n        width: 100%;\\n        height: 90vh;\\n        background-color: black;\\n        position: relative;\\n}\\n\\n.toc[_ngcontent-%COMP%] {\\n        display: flex;\\n        flex: 1.1;\\n}\\n\\n.content[_ngcontent-%COMP%] {\\n        padding: 2.1%;\\n        flex: 3.5;\\n        border-style: groove;\\n        border-color: grey;\\n        border-top-right-radius: 20px;\\n        border-bottom-right-radius: 20px;\\n        background-color: white;\\n        overflow-y: scroll;\\n}\\n\\nul[_ngcontent-%COMP%] {\\n        list-style: none;\\n        padding: 0;\\n        margin: 0;\\n}\\n\\nli[_ngcontent-%COMP%] {\\n        margin-top: 8%;\\n}\\n\\na[_ngcontent-%COMP%] {\\n        text-decoration: none;\\n        color: gray;\\n}\\n\\na[_ngcontent-%COMP%]:hover {\\n        -webkit-text-decoration: solid;\\n                text-decoration: solid;\\n}\\n\\na[href^=\\\"#\\\"][_ngcontent-%COMP%] {\\n        transition-duration: 10000s;\\n        \\n}\\n\\n#section1[_ngcontent-%COMP%], #section2[_ngcontent-%COMP%], #section3[_ngcontent-%COMP%], #section4[_ngcontent-%COMP%], #section5[_ngcontent-%COMP%], #section6[_ngcontent-%COMP%], #section7[_ngcontent-%COMP%], #section8[_ngcontent-%COMP%] {\\n        padding: 20px;\\n        margin-bottom: 20px;\\n}\\n\\n\\n.container[_ngcontent-%COMP%] {\\n        width: 90%;\\n        height: 100%;\\n        overflow: auto;\\n        border-radius: 12px;\\n        margin-left: 10%;\\n}\\n\\n[language-python^=\\\"[_ngcontent-%COMP%]{{ }}\\\"][_ngcontent-%COMP%] {\\n        display: none;\\n}\\n\\n.code-wrapper[_ngcontent-%COMP%] {\\n        position: relative;\\n\\n}\\n\\n#copy-button[_ngcontent-%COMP%] {\\n        position: absolute;\\n        top: 8px;\\n        right: 8px;\\n        padding: 7px;\\n        background-color: #2d2d2d;\\n        outline: none;\\n        color: white;\\n        border-radius: 8px;\\n        cursor: pointer;\\n        transition: all 0.2s ease-in;\\n        opacity: 0;\\n        border: 1px solid antiquewhite;\\n}\\n\\n#copy-button.show-msg[_ngcontent-%COMP%] {\\n        display: none;\\n\\n}\\n\\n#copy-button[_ngcontent-%COMP%]:hover {\\n        background-color: #423e3e;\\n}\\n\\n.code-wrapper[_ngcontent-%COMP%]:hover   #copy-button[_ngcontent-%COMP%] {\\n        opacity: 1;\\n}\\n\\n\\n\\np[_ngcontent-%COMP%] {\\n        text-indent: 2em;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9lbGFzdGljLWRvY2tlci9lbGFzdGljLWRvY2tlci5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO1FBQ1EsYUFBYTtRQUNiLG1CQUFtQjtRQUNuQixXQUFXO1FBQ1gsWUFBWTtRQUNaLHVCQUF1QjtRQUN2QixrQkFBa0I7QUFDMUI7O0FBRUE7UUFDUSxhQUFhO1FBQ2IsU0FBUztBQUNqQjs7QUFFQTtRQUNRLGFBQWE7UUFDYixTQUFTO1FBQ1Qsb0JBQW9CO1FBQ3BCLGtCQUFrQjtRQUNsQiw2QkFBNkI7UUFDN0IsZ0NBQWdDO1FBQ2hDLHVCQUF1QjtRQUN2QixrQkFBa0I7QUFDMUI7O0FBRUE7UUFDUSxnQkFBZ0I7UUFDaEIsVUFBVTtRQUNWLFNBQVM7QUFDakI7O0FBRUE7UUFDUSxjQUFjO0FBQ3RCOztBQUVBO1FBQ1EscUJBQXFCO1FBQ3JCLFdBQVc7QUFDbkI7O0FBRUE7UUFDUSw4QkFBc0I7Z0JBQXRCLHNCQUFzQjtBQUM5Qjs7QUFFQTtRQUNRLDJCQUEyQjtRQUMzQiw4Q0FBOEM7QUFDdEQ7O0FBRUE7Ozs7Ozs7O1FBUVEsYUFBYTtRQUNiLG1CQUFtQjtBQUMzQjs7O0FBR0E7UUFDUSxVQUFVO1FBQ1YsWUFBWTtRQUNaLGNBQWM7UUFDZCxtQkFBbUI7UUFDbkIsZ0JBQWdCO0FBQ3hCOztBQUVBO1FBQ1EsYUFBYTtBQUNyQjs7QUFFQTtRQUNRLGtCQUFrQjs7QUFFMUI7O0FBRUE7UUFDUSxrQkFBa0I7UUFDbEIsUUFBUTtRQUNSLFVBQVU7UUFDVixZQUFZO1FBQ1oseUJBQXlCO1FBQ3pCLGFBQWE7UUFDYixZQUFZO1FBQ1osa0JBQWtCO1FBQ2xCLGVBQWU7UUFDZiw0QkFBNEI7UUFDNUIsVUFBVTtRQUNWLDhCQUE4QjtBQUN0Qzs7QUFFQTtRQUNRLGFBQWE7O0FBRXJCOztBQUVBO1FBQ1EseUJBQXlCO0FBQ2pDOztBQUVBO1FBQ1EsVUFBVTtBQUNsQjs7OztBQUlBO1FBQ1EsZ0JBQWdCO0FBQ3hCIiwic291cmNlc0NvbnRlbnQiOlsiLmdsb2JhbCB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBoZWlnaHQ6IDkwdmg7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5cbi50b2Mge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4OiAxLjE7XG59XG5cbi5jb250ZW50IHtcbiAgICAgICAgcGFkZGluZzogMi4xJTtcbiAgICAgICAgZmxleDogMy41O1xuICAgICAgICBib3JkZXItc3R5bGU6IGdyb292ZTtcbiAgICAgICAgYm9yZGVyLWNvbG9yOiBncmV5O1xuICAgICAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMjBweDtcbiAgICAgICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDIwcHg7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgICAgICBvdmVyZmxvdy15OiBzY3JvbGw7XG59XG5cbnVsIHtcbiAgICAgICAgbGlzdC1zdHlsZTogbm9uZTtcbiAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgbWFyZ2luOiAwO1xufVxuXG5saSB7XG4gICAgICAgIG1hcmdpbi10b3A6IDglO1xufVxuXG5hIHtcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICBjb2xvcjogZ3JheTtcbn1cblxuYTpob3ZlciB7XG4gICAgICAgIHRleHQtZGVjb3JhdGlvbjogc29saWQ7XG59XG5cbmFbaHJlZl49XCIjXCJdIHtcbiAgICAgICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMTAwMDBzO1xuICAgICAgICAvKiBDaGFuZ2UgdGhpcyB0byBhZGp1c3QgdGhlIGFuaW1hdGlvbiBzcGVlZCAqL1xufVxuXG4jc2VjdGlvbjEsXG4jc2VjdGlvbjIsXG4jc2VjdGlvbjMsXG4jc2VjdGlvbjQsXG4jc2VjdGlvbjUsXG4jc2VjdGlvbjYsXG4jc2VjdGlvbjcsXG4jc2VjdGlvbjgge1xuICAgICAgICBwYWRkaW5nOiAyMHB4O1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xufVxuXG5cbi5jb250YWluZXIge1xuICAgICAgICB3aWR0aDogOTAlO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIG92ZXJmbG93OiBhdXRvO1xuICAgICAgICBib3JkZXItcmFkaXVzOiAxMnB4O1xuICAgICAgICBtYXJnaW4tbGVmdDogMTAlO1xufVxuXG5bbGFuZ3VhZ2UtcHl0aG9uXj1cInt7IH19XCJdIHtcbiAgICAgICAgZGlzcGxheTogbm9uZTtcbn1cblxuLmNvZGUtd3JhcHBlciB7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcblxufVxuXG4jY29weS1idXR0b24ge1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHRvcDogOHB4O1xuICAgICAgICByaWdodDogOHB4O1xuICAgICAgICBwYWRkaW5nOiA3cHg7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMyZDJkMmQ7XG4gICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogOHB4O1xuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjJzIGVhc2UtaW47XG4gICAgICAgIG9wYWNpdHk6IDA7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGFudGlxdWV3aGl0ZTtcbn1cblxuI2NvcHktYnV0dG9uLnNob3ctbXNnIHtcbiAgICAgICAgZGlzcGxheTogbm9uZTtcblxufVxuXG4jY29weS1idXR0b246aG92ZXIge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNDIzZTNlO1xufVxuXG4uY29kZS13cmFwcGVyOmhvdmVyICNjb3B5LWJ1dHRvbiB7XG4gICAgICAgIG9wYWNpdHk6IDE7XG59XG5cblxuXG5wIHtcbiAgICAgICAgdGV4dC1pbmRlbnQ6IDJlbTtcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["ElasticDockerComponent","constructor","ngOnInit","loadScript","window","onload","scriptUrl","Tipo","script","document","createElement","type","src","body","appendChild","link","rel","href","head","scrollToSection","elementId","elementToScrollTo","getElementById","scrollIntoView","behavior","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/home/lmdc/Documents/WebPage/src/app/components/elastic-docker/elastic-docker.component.ts","/home/lmdc/Documents/WebPage/src/app/components/elastic-docker/elastic-docker.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-elastic-docker',\n  templateUrl: './elastic-docker.component.html',\n  styleUrls: ['./elastic-docker.component.css']\n})\nexport class ElasticDockerComponent {\n\n  tableOfContents: Array<string>[]= [\n    ['section1','Introduction'],\n    ['section2','Docker compose file'],\n    ['section3','Connection'],\n    ['section4','Indices and snapshots'],\n    ['section5','Restore indices from snapshots']\n  ];\n\n\n  ngOnInit() {      \n    this.loadScript('./assets/prism.js', 'js');\n    window.onload = () => {\n      this.loadScript('./assets/main.js', 'js');\n    };\n  }\n\n  loadScript(scriptUrl: string,Tipo: string) {\n    if (Tipo=='js'){\n      const script = document.createElement('script');\n      script.type = 'text/javascript';\n      script.src = scriptUrl;\n      document.body.appendChild(script);\n    }  else if (Tipo === 'css') {\n      const link = document.createElement('link');\n      link.rel='stylesheet'\n      link.type = 'text/css';\n      link.href = scriptUrl;\n      document.head.appendChild(link);\n    }   \n  }\n\n  scrollToSection(elementId: string): void {\n    const elementToScrollTo = document.getElementById(elementId);\n    if (elementToScrollTo) {\n      elementToScrollTo.scrollIntoView({ behavior: 'smooth' });\n    }\n  }\n\n}\n","<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\n    <title>Document</title>\n</head>\n\n<body>\n\n    <app-header></app-header>\n\n    <div class=\"global\">\n        <div class=\"toc\">\n            <app-table-of-contents [tableOfContents]=\"tableOfContents\"\n                (scrollToElement)=\"scrollToSection($event)\"></app-table-of-contents>\n        </div>\n\n        <div class=\"content\">\n            <div id=\"section1\">\n                <h2>Introduction</h2>\n                <p>\n                    This time we going to create a ElasticSeach (ES) instance using docker, learn\n                    how to push our data\n                    in ES indices and how to make snapshots (backups) in a local binding folder.\n                    Finally we'll restore the example indices\n                    in another ES instance. For more details see <a\n                        href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html\">ElasticSearch\n                    </a>. All source code is in the <a href=\"https://github.com/lmdcma27/elastic-docker\" style=\"color: green;\" target=\"_blank\">github repository</a>\n                </p>\n            </div>\n            <div id=\"section2\">\n                <h2>Docker compose file</h2>\n                <p>The first thing to do is create the instance copy and paste the code below into a\n                    yaml file callled 'docker-compose.yaml', or '.yml'.</p>\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                            <code code id=\"code\" class=\"language-python\">   \n                                                version: '3.9'\n                                                services:\n                                                    es01:\n                                                        container_name: es01\n                                                        image: docker.elastic.co/elasticsearch/elasticsearch:8.8.2\n                                                        environment: \n                                                            - discovery.type=single-node\n                                                            - path.repo=/usr/share/elasticsearch/backups\n                                                        restart: always\n                                                        ports:\n                                                            - 9200:9200\n                                                        networks:\n                                                            - elastic\n                                                        volumes:\n                                                            - es_data:/usr/share/elasticsearch/data\n                                                            - ./backups:/usr/share/elasticsearch/backups\n\n                                                    kibana:\n                                                        container_name: kibana\n                                                        image: docker.elastic.co/kibana/kibana:8.8.2\n                                                        restart: always\n                                                        ports:\n                                                            - 5601:5601\n                                                        networks:\n                                                            - elastic\n\n                                                volumes:\n                                                    es_data:\n                                                networks:\n                                                    elastic:\n                            </code>\n                        </pre>\n                        <button id=\"copy-button\">\n                            Copy\n                        </button>\n                    </div>\n                </div>\n                When the building of the container has finished, we find a folder called 'backups' beside we\n                docker-compose.yaml file\n            </div>\n            <div id=\"section3\">\n                <h2>Connection</h2>\n                <p>\n                    The connection will be with python using the library elasticsearch, the '7.13.4' version works fine.\n                    We can install it in our\n                    python environment:\n                </p>\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                            <code code id=\"code\" class=\"language-python\">   \n                                pip install elasticsearch==7.13.4   \n                            </code>\n                        </pre>\n                        <button id=\"copy-button\">\n                            Copy\n                        </button>\n                    </div>\n                </div>\n                Before the connection, we need the token, password and api key. Open terminal, for the token run:\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                            <code code id=\"code\" class=\"language-python\">   \n                                sudo docker exec -it es01 /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s kibana\n                            </code>\n                        </pre>\n                        <button id=\"copy-button\">\n                            Copy\n                        </button>\n                    </div>\n                </div>\n                and for the password:\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                            <code code id=\"code\" class=\"language-python\">   \n                                sudo docker exec -it es01 /usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic\n                            </code>\n                        </pre>\n                        <button id=\"copy-button\">\n                            Copy\n                        </button>\n                    </div>\n                </div>\n                then enter 'y' in the terminal.\n                <br>\n                <p>\n                    Now, in the 'localhost:5601' we can paste the required token. Kibana gives a verification code of 6\n                    digits and we can get from terminal keyboarding 'docker logs kibana' . After that, we login with\n                    password and\n                    user 'elastic'\n                </p>\n                <img src=\"./assets/images/elasticdocker/pastetoken.png\"\n                    style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\">\n                <img src=\"./assets/images/elasticdocker/codeverification.png\"\n                    style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\">\n\n                <p> Once in kibana interface, go to the endpoint\n                    'http://localhost:5601/app/management/security/api_keys/', click on 'Create API key' button, assign\n                    a name and copy as json.</p>\n                <img src=\"./assets/images/elasticdocker/apikey.png\"\n                    style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\">\n                <p>\n                    The connection function is\n                </p>\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                                <code code id=\"code\" class=\"language-python\"> \n                                    from elasticsearch import Elasticsearch\n                                    import warnings\n                                    warnings.filterwarnings(\"ignore\")    \n                                    def Connection(es_host:str,es_user:str,es_password:str,api_key:tuple):\n                                        es = Elasticsearch( hosts=[es_host],\n                                                            basic_auth=(es_user, es_password), \n                                                            verify_certs=False,\n                                                            api_key=api_key\n                                        )\n                                        return es                \n                                </code>\n                            </pre>\n                        <button id=\"copy-button\">\n                            Copy\n                        </button>\n                    </div>\n                </div>\n                <p>So, we can verify the connection</p>\n\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                                <code code id=\"code\" class=\"language-python\">   \n                                    api_key=('api_id','api_key')\n                                    es=Connection('https://localhost:9200/','elastic','password',api_key)\n                                    print(es.info())\n                                </code>\n                            </pre>\n                        <button id=\"copy-button\">\n                            Copy\n                        </button>\n                    </div>\n                </div>\n                and get something like this\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                                <code code id=\"code\" class=\"language-python\">   \n                                    &#123;'name': '349860b1705d', \n                                          'cluster_name': 'docker-cluster', \n                                          'cluster_uuid': 'ChyUT4WjR4GJ9S3fcqsMZQ', \n                                          'version': &#123;'number': '8.8.2', \n                                            'build_flavor': 'default', \n                                            'build_type': 'docker', \n                                            'build_hash': '98e1271edf932a480e4262a471281f1ee295ce6b', \n                                            'build_date': '2023-06-26T05:16:16.196344851Z', \n                                            'build_snapshot': False, 'lucene_version': '9.6.0', \n                                            'minimum_wire_compatibility_version': '7.17.0', \n                                            'minimum_index_compatibility_version': '7.0.0'\n                                            &#125;, \n                                          'tagline': 'You Know, for Search'\n                                    &#125;\n                                </code>\n                            </pre>\n                        <button id=\"copy-button\">\n                            Copy\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n\n            <div id=\"section4\">\n                <h2>Indices and snapshots</h2>\n                <p>\n                    To create a snapshot we first need a index to backup so, that's easy\n                </p>\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                                <code code id=\"code\" class=\"language-python\">   \n                                def create_index(conn,name):\n                                    if name in conn.indices.get('*').keys():\n                                        print(\"This index already exists\")\n                                    else:\n                                        print(\"New index created\")  \n                                        conn.indices.create(index=name) \n                                create_index(es,'favorite_mangas')\n                                </code>\n                            </pre>\n                        <button id=\"copy-button\">\n                            Copy\n                        </button>\n                    </div>\n                </div>\n                Pushing some data to the new index.\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                            <code code id=\"code\" class=\"language-python\">   \n                                es.index(index='favorite_mangas',body=&#123;'Manga':'One Piece','Author':'Eiichiro Oda','Year':'1997'&#125;)\n                                es.index(index='favorite_mangas',body=&#123;'Manga':'Hunter x Hunter','Author':'Yoshihiro Togashi ','Year':'1999'&#125;)\n                                es.index(index='favorite_mangas',body=&#123;'Manga':'Naruto','Author':'Masashi Kishimoto','Year':'1998'&#125;)\n                            </code>\n                        </pre>\n                        <button id=\"copy-button\">\n                            Copy\n                        </button>\n                    </div>\n                </div>\n                <p>\n                    To create a snapshot it is necessary the repository name and the index name, the index name can be a indices list, but be carefull\n                to change the snapshot name.\n                </p>\n                <p>\n                    First the function to create the repository, note that the \"location\" parameter in the \"create_repository\" function\n                    is the path inside the docker container, the same used above in the docker compose file.\n                </p>\n\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                            <code code id=\"code\" class=\"language-python\">   \n                                def create_repository(conn, repository_name='my_fs_backup'):\n                                    # Snapshot repository settings\n                                    repository_type = 'fs'\n                                    repository_settings = &#123;            \n                                        \"location\": \"/usr/share/elasticsearch/backups\",\n                                        \"compress\": \"true\"\n                                    &#125;\n                                    response = conn.snapshot.create_repository(repository_name, body=&#123;\n                                        \"type\": repository_type,\n                                        \"settings\": repository_settings\n                                    &#125;, request_timeout=30)\n\n                                    print(response)\n                            </code>\n                        </pre>\n                        <button id=\"copy-button\">\n                            Copy\n                        </button>\n                    </div>\n                </div>\n                <p>\n                    Next, the function that create the snapshot.\n                </p>\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                            <code code id=\"code\" class=\"language-python\">   \n                                def create_snapshot(conn,index_name):\n                                \n                                    repository_name = 'my_fs_backup' #Snapshot repository name\n                                    snapshot_name = index_name+'_snapshot' # Replace with a suitable name for your snapshot\n                                    try:\n                                        response = conn.snapshot.create(repository=repository_name, snapshot=snapshot_name, body=&#123;\n                                            \"indices\": index_name,\n                                            \"include_global_state\": False\n                                            &#125;, request_timeout=300)\n\n                                        print(response)\n                                    except:\n                                        print(\"The index doesn't exists\")  \n                                \n                            </code>\n                        </pre>\n                        <button id=\"copy-button\">\n                            Copy\n                        </button>\n                    </div>\n                </div>\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                            <code code id=\"code\" class=\"language-python\">   \n                                create_repository(conn)\n                                create_snapshot(conn,'favorite_mangas')                                                  \n                            </code>\n                        </pre>\n                        <button id=\"copy-button\">\n                            Copy\n                        </button>\n                    </div>\n                </div>                \n                <p>Don't forget read the <a href=\"https://elasticsearch-py.readthedocs.io/en/v8.10.1/\">ES documentation for python</a></p>\n            </div>\n            <div id=\"section5\">\n                <h2>Restoring indices from snapshots</h2>\n                <p>\n                    Finally, it is possible restore indices from snapshots. To do this we can delete docker-compose image using \"docker compose down -v\" in terminal, \n                    and repeat all steps until before creating a new index, that just take a few minutes and it's a good practice.              \n                </p>\n                <p>\n                    Before continue, here is a usefull list of function to list repositories, snapshots and indices in our instance.                    \n                </p>\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                            <code code id=\"code\" class=\"language-python\">   \n                                def list_repositories(conn):\n                                    # List snapshot repositories\n                                    repositories = conn.snapshot.get_repository()\n                                    print(\"Snapshot Repositories:\")\n                                    for repo_name in repositories:\n                                        print(repo_name)      \n                                            \n                                def list_snapshots(conn):\n                                    # List snapshots\n                                    repository_name = 'my_fs_backup'\n                                    snapshot_repository = conn.snapshot.get_repository(repository=repository_name)\n                                    snapshot_repository_name = snapshot_repository[repository_name]['type']\n\n                                    snapshots = conn.snapshot.get(repository=repository_name, snapshot='_all')\n                                    print(\"Snapshots:\")\n                                    for snapshot in snapshots['snapshots']:\n                                        print(snapshot['snapshot'])\n                                        \n                                def list_indices(conn):\n                                    indices = conn.indices.get('*')\n                                    print(\"Indices:\")\n                                    print(indices.keys())    \n                            </code>\n                        </pre>\n                        <button id=\"copy-button\">\n                            Copy\n                        </button>\n                    </div>\n                </div>\n                <p>\n                    When a snapshot is restored it's necessary indicate a existing repository, don't forget. The code is as follow, first the restoring snapshot function                    \n                </p>\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                            <code code id=\"code\" class=\"language-python\">   \n                                def restore_snapshot(conn,snapshot_name,index_name):\n\n                                    # Snapshot repository name\n                                    repository_name = 'my_fs_backup'\n                                        \n                                    # Restore the snapshot\n                                    response = conn.snapshot.restore(repository=repository_name, snapshot=snapshot_name, body=&#123;\n                                        \"indices\": index_name\n                                    &#125;, request_timeout=300)\n                                    print(response)\n                            </code>\n                        </pre>\n                        <button id=\"copy-button\">\n                            Copy\n                        </button>\n                    </div>\n                </div>\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                            <code code id=\"code\" class=\"language-python\">   \n                                create_repository()\n                                restore_snapshot(es,'favorite_mangas_snapshot','favorite_mangas_restored')\n                            </code>\n                        </pre>\n                        <button id=\"copy-button\">\n                            Copy\n                        </button>\n                    </div>\n                </div>\n                <p>The last part is query the info in the 'favorite_mangas_restored' index, we can try</p>\n\n\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                            <code code id=\"code\" class=\"language-python\">   \n                                result=es.search(index='my_first_index',body=&#123;'query':&#123;'match_all':&#123;&#125;&#125;&#125; )\n                                for register in result['hits']['hits']:\n                                    print(register['_source'])\n                            </code>\n                        </pre>\n                        <button id=\"copy-button\">\n                            Copy\n                        </button>\n                    </div>\n                </div>\n\n                \n            </div>\n        </div>\n\n    </div>\n\n</body>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}