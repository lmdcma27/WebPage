{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../header/header.component\";\nimport * as i2 from \"../table-of-contents/table-of-contents.component\";\nexport let ElasticDockerComponent = /*#__PURE__*/(() => {\n  class ElasticDockerComponent {\n    constructor() {\n      this.tableOfContents = [['section1', 'Introduction'], ['section2', 'Docker compose file'], ['section3', 'Connection'], ['section4', 'Indices and snapshots'], ['section5', 'Restore indices from snapshots']];\n    }\n    ngOnInit() {\n      this.loadScript('./assets/prism.js', 'js');\n      window.onload = () => {\n        this.loadScript('./assets/main.js', 'js');\n      };\n    }\n    loadScript(scriptUrl, Tipo) {\n      if (Tipo == 'js') {\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = scriptUrl;\n        document.body.appendChild(script);\n      } else if (Tipo === 'css') {\n        const link = document.createElement('link');\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = scriptUrl;\n        document.head.appendChild(link);\n      }\n    }\n    scrollToSection(elementId) {\n      const elementToScrollTo = document.getElementById(elementId);\n      if (elementToScrollTo) {\n        elementToScrollTo.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }\n    }\n  }\n  ElasticDockerComponent.ɵfac = function ElasticDockerComponent_Factory(t) {\n    return new (t || ElasticDockerComponent)();\n  };\n  ElasticDockerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ElasticDockerComponent,\n    selectors: [[\"app-elastic-docker\"]],\n    decls: 221,\n    vars: 1,\n    consts: [[\"lang\", \"en\"], [\"charset\", \"UTF-8\"], [\"http-equiv\", \"X-UA-Compatible\", \"content\", \"IE=edge\"], [\"name\", \"viewport\", \"content\", \"width=device-width, initial-scale=1.0\"], [1, \"global\"], [1, \"toc\"], [3, \"tableOfContents\", \"scrollToElement\"], [1, \"content\"], [\"id\", \"section1\"], [\"href\", \"https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html\"], [\"href\", \"https://github.com/lmdcma27/elastic-docker\", \"target\", \"_blank\", 2, \"color\", \"green\"], [\"id\", \"section2\"], [1, \"container\"], [1, \"code-wrapper\"], [\"code\", \"\", \"id\", \"code\", 1, \"language-python\"], [\"id\", \"copy-button\"], [\"id\", \"section3\"], [\"src\", \"./assets/images/elasticdocker/pastetoken.png\", \"alt\", \"\", 2, \"display\", \"block\", \"margin-left\", \"auto\", \"margin-right\", \"auto\"], [\"src\", \"./assets/images/elasticdocker/codeverification.png\", \"alt\", \"\", 2, \"display\", \"block\", \"margin-left\", \"auto\", \"margin-right\", \"auto\"], [\"src\", \"./assets/images/elasticdocker/apikey.png\", \"alt\", \"\", 2, \"display\", \"block\", \"margin-left\", \"auto\", \"margin-right\", \"auto\"], [\"id\", \"section4\"], [\"href\", \"https://elasticsearch-py.readthedocs.io/en/v8.10.1/\"], [\"id\", \"section5\"]],\n    template: function ElasticDockerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"html\", 0)(1, \"head\");\n        i0.ɵɵelement(2, \"meta\", 1)(3, \"meta\", 2)(4, \"meta\", 3);\n        i0.ɵɵelementStart(5, \"title\");\n        i0.ɵɵtext(6, \"Document\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"body\");\n        i0.ɵɵelement(8, \"app-header\");\n        i0.ɵɵelementStart(9, \"div\", 4)(10, \"div\", 5)(11, \"app-table-of-contents\", 6);\n        i0.ɵɵlistener(\"scrollToElement\", function ElasticDockerComponent_Template_app_table_of_contents_scrollToElement_11_listener($event) {\n          return ctx.scrollToSection($event);\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"div\", 7)(13, \"div\", 8)(14, \"h2\");\n        i0.ɵɵtext(15, \"Introduction\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"p\");\n        i0.ɵɵtext(17, \" This time we going to create a ElasticSeach (ES) instance using docker, learn how to push our data in ES indices and how to make snapshots (backups) in a local binding folder. Finally we'll restore the example indices in another ES instance. For more details see \");\n        i0.ɵɵelementStart(18, \"a\", 9);\n        i0.ɵɵtext(19, \"ElasticSearch \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(20, \". All source code is in the \");\n        i0.ɵɵelementStart(21, \"a\", 10);\n        i0.ɵɵtext(22, \"github repository\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(23, \"div\", 11)(24, \"h2\");\n        i0.ɵɵtext(25, \"Docker compose file\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"p\");\n        i0.ɵɵtext(27, \"The first thing to do is create the instance copy and paste the code below into a yaml file callled 'docker-compose.yaml', or '.yml'.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"div\", 12)(29, \"div\", 13)(30, \"pre\");\n        i0.ɵɵtext(31, \"                            \");\n        i0.ɵɵelementStart(32, \"code\", 14);\n        i0.ɵɵtext(33, \"   \\n                                                version: '3.9'\\n                                                services:\\n                                                    es01:\\n                                                        container_name: es01\\n                                                        image: docker.elastic.co/elasticsearch/elasticsearch:8.8.2\\n                                                        environment: \\n                                                            - discovery.type=single-node\\n                                                            - path.repo=/usr/share/elasticsearch/backups\\n                                                        restart: always\\n                                                        ports:\\n                                                            - 9200:9200\\n                                                        networks:\\n                                                            - elastic\\n                                                        volumes:\\n                                                            - es_data:/usr/share/elasticsearch/data\\n                                                            - ./backups:/usr/share/elasticsearch/backups\\n\\n                                                    kibana:\\n                                                        container_name: kibana\\n                                                        image: docker.elastic.co/kibana/kibana:8.8.2\\n                                                        restart: always\\n                                                        ports:\\n                                                            - 5601:5601\\n                                                        networks:\\n                                                            - elastic\\n\\n                                                volumes:\\n                                                    es_data:\\n                                                networks:\\n                                                    elastic:\\n                            \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(34, \"\\n                        \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"button\", 15);\n        i0.ɵɵtext(36, \" Copy \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtext(37, \" When the building of the container has finished, we find a folder called 'backups' beside we docker-compose.yaml file \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(38, \"div\", 16)(39, \"h2\");\n        i0.ɵɵtext(40, \"Connection\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(41, \"p\");\n        i0.ɵɵtext(42, \" The connection will be with python using the library elasticsearch, the '7.13.4' version works fine. We can install it in our python environment: \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(43, \"div\", 12)(44, \"div\", 13)(45, \"pre\");\n        i0.ɵɵtext(46, \"                            \");\n        i0.ɵɵelementStart(47, \"code\", 14);\n        i0.ɵɵtext(48, \"   \\n                                pip install elasticsearch==7.13.4   \\n                            \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(49, \"\\n                        \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(50, \"button\", 15);\n        i0.ɵɵtext(51, \" Copy \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtext(52, \" Before the connection, we need the token, password and api key. Open terminal, for the token run: \");\n        i0.ɵɵelementStart(53, \"div\", 12)(54, \"div\", 13)(55, \"pre\");\n        i0.ɵɵtext(56, \"                            \");\n        i0.ɵɵelementStart(57, \"code\", 14);\n        i0.ɵɵtext(58, \"   \\n                                sudo docker exec -it es01 /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s kibana\\n                            \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(59, \"\\n                        \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(60, \"button\", 15);\n        i0.ɵɵtext(61, \" Copy \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtext(62, \" and for the password: \");\n        i0.ɵɵelementStart(63, \"div\", 12)(64, \"div\", 13)(65, \"pre\");\n        i0.ɵɵtext(66, \"                            \");\n        i0.ɵɵelementStart(67, \"code\", 14);\n        i0.ɵɵtext(68, \"   \\n                                sudo docker exec -it es01 /usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic\\n                            \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(69, \"\\n                        \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(70, \"button\", 15);\n        i0.ɵɵtext(71, \" Copy \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtext(72, \" then enter 'y' in the terminal. \");\n        i0.ɵɵelement(73, \"br\");\n        i0.ɵɵelementStart(74, \"p\");\n        i0.ɵɵtext(75, \" Now, in the 'localhost:5601' we can paste the required token. Kibana gives a verification code of 6 digits and we can get from terminal keyboarding 'docker logs kibana' . After that, we login with password and user 'elastic' \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(76, \"img\", 17)(77, \"img\", 18);\n        i0.ɵɵelementStart(78, \"p\");\n        i0.ɵɵtext(79, \" Once in kibana interface, go to the endpoint 'http://localhost:5601/app/management/security/api_keys/', click on 'Create API key' button, assign a name and copy as json.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(80, \"img\", 19);\n        i0.ɵɵelementStart(81, \"p\");\n        i0.ɵɵtext(82, \" The connection function is \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(83, \"div\", 12)(84, \"div\", 13)(85, \"pre\");\n        i0.ɵɵtext(86, \"                                \");\n        i0.ɵɵelementStart(87, \"code\", 14);\n        i0.ɵɵtext(88, \" \\n                                    from elasticsearch import Elasticsearch\\n                                    import warnings\\n                                    warnings.filterwarnings(\\\"ignore\\\")    \\n                                    def Connection(es_host:str,es_user:str,es_password:str,api_key:tuple):\\n                                        es = Elasticsearch( hosts=[es_host],\\n                                                            basic_auth=(es_user, es_password), \\n                                                            verify_certs=False,\\n                                                            api_key=api_key\\n                                        )\\n                                        return es                \\n                                \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(89, \"\\n                            \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(90, \"button\", 15);\n        i0.ɵɵtext(91, \" Copy \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(92, \"p\");\n        i0.ɵɵtext(93, \"So, we can verify the connection\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(94, \"div\", 12)(95, \"div\", 13)(96, \"pre\");\n        i0.ɵɵtext(97, \"                                \");\n        i0.ɵɵelementStart(98, \"code\", 14);\n        i0.ɵɵtext(99, \"   \\n                                    api_key=('api_id','api_key')\\n                                    conn=Connection('https://localhost:9200/','elastic','password',api_key)\\n                                    print(conn.info())\\n                                \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(100, \"\\n                            \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(101, \"button\", 15);\n        i0.ɵɵtext(102, \" Copy \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtext(103, \" and get something like this \");\n        i0.ɵɵelementStart(104, \"div\", 12)(105, \"div\", 13)(106, \"pre\");\n        i0.ɵɵtext(107, \"                                \");\n        i0.ɵɵelementStart(108, \"code\", 14);\n        i0.ɵɵtext(109, \"   \\n                                    {'name': '349860b1705d', \\n                                          'cluster_name': 'docker-cluster', \\n                                          'cluster_uuid': 'ChyUT4WjR4GJ9S3fcqsMZQ', \\n                                          'version': {'number': '8.8.2', \\n                                            'build_flavor': 'default', \\n                                            'build_type': 'docker', \\n                                            'build_hash': '98e1271edf932a480e4262a471281f1ee295ce6b', \\n                                            'build_date': '2023-06-26T05:16:16.196344851Z', \\n                                            'build_snapshot': False, 'lucene_version': '9.6.0', \\n                                            'minimum_wire_compatibility_version': '7.17.0', \\n                                            'minimum_index_compatibility_version': '7.0.0'\\n                                            }, \\n                                          'tagline': 'You Know, for Search'\\n                                    }\\n                                \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(110, \"\\n                            \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(111, \"button\", 15);\n        i0.ɵɵtext(112, \" Copy \");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(113, \"div\", 20)(114, \"h2\");\n        i0.ɵɵtext(115, \"Indices and snapshots\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(116, \"p\");\n        i0.ɵɵtext(117, \" To create a snapshot we first need a index to backup so, that's easy \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(118, \"div\", 12)(119, \"div\", 13)(120, \"pre\");\n        i0.ɵɵtext(121, \"                                \");\n        i0.ɵɵelementStart(122, \"code\", 14);\n        i0.ɵɵtext(123, \"   \\n                                def create_index(conn,name):\\n                                    if name in conn.indices.get('*').keys():\\n                                        print(\\\"This index already exists\\\")\\n                                    else:\\n                                        print(\\\"New index created\\\")  \\n                                        conn.indices.create(index=name) \\n                                create_index(conn,'favorite_mangas')\\n                                \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(124, \"\\n                            \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(125, \"button\", 15);\n        i0.ɵɵtext(126, \" Copy \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtext(127, \" Pushing some data to the new index. \");\n        i0.ɵɵelementStart(128, \"div\", 12)(129, \"div\", 13)(130, \"pre\");\n        i0.ɵɵtext(131, \"                            \");\n        i0.ɵɵelementStart(132, \"code\", 14);\n        i0.ɵɵtext(133, \"   \\n                                conn.index(index='favorite_mangas',body={'Manga':'One Piece','Author':'Eiichiro Oda','Year':'1997'})\\n                                conn.index(index='favorite_mangas',body={'Manga':'Hunter x Hunter','Author':'Yoshihiro Togashi ','Year':'1999'})\\n                                conn.index(index='favorite_mangas',body={'Manga':'Naruto','Author':'Masashi Kishimoto','Year':'1998'})\\n                            \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(134, \"\\n                        \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(135, \"button\", 15);\n        i0.ɵɵtext(136, \" Copy \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(137, \"p\");\n        i0.ɵɵtext(138, \" To create a snapshot it is necessary the repository name and the index name, the index name can be a indices list, but be carefull to change the snapshot name. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(139, \"p\");\n        i0.ɵɵtext(140, \" First the function to create the repository, note that the \\\"location\\\" parameter in the \\\"create_repository\\\" function is the path inside the docker container, the same used above in the docker compose file. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(141, \"div\", 12)(142, \"div\", 13)(143, \"pre\");\n        i0.ɵɵtext(144, \"                            \");\n        i0.ɵɵelementStart(145, \"code\", 14);\n        i0.ɵɵtext(146, \"   \\n                                def create_repository(conn, repository_name='my_fs_backup'):\\n                                    # Snapshot repository settings\\n                                    repository_type = 'fs'\\n                                    repository_settings = {            \\n                                        \\\"location\\\": \\\"/usr/share/elasticsearch/backups\\\",\\n                                        \\\"compress\\\": \\\"true\\\"\\n                                    }\\n                                    response = conn.snapshot.create_repository(repository_name, body={\\n                                        \\\"type\\\": repository_type,\\n                                        \\\"settings\\\": repository_settings\\n                                    }, request_timeout=30)\\n\\n                                    print(response)\\n                            \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(147, \"\\n                        \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(148, \"button\", 15);\n        i0.ɵɵtext(149, \" Copy \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(150, \"p\");\n        i0.ɵɵtext(151, \" Next, the function that create the snapshot. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(152, \"div\", 12)(153, \"div\", 13)(154, \"pre\");\n        i0.ɵɵtext(155, \"                            \");\n        i0.ɵɵelementStart(156, \"code\", 14);\n        i0.ɵɵtext(157, \"   \\n                                def create_snapshot(conn,index_name):\\n                                \\n                                    repository_name = 'my_fs_backup' #Snapshot repository name\\n                                    snapshot_name = index_name+'_snapshot' # Replace with a suitable name for your snapshot\\n                                    try:\\n                                        response = conn.snapshot.create(repository=repository_name, snapshot=snapshot_name, body={\\n                                            \\\"indices\\\": index_name,\\n                                            \\\"include_global_state\\\": False\\n                                            }, request_timeout=300)\\n\\n                                        print(response)\\n                                    except:\\n                                        print(\\\"The index doesn't exists\\\")  \\n                                \\n                            \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(158, \"\\n                        \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(159, \"button\", 15);\n        i0.ɵɵtext(160, \" Copy \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(161, \"div\", 12)(162, \"div\", 13)(163, \"pre\");\n        i0.ɵɵtext(164, \"                            \");\n        i0.ɵɵelementStart(165, \"code\", 14);\n        i0.ɵɵtext(166, \"   \\n                                create_repository(conn)\\n                                create_snapshot(conn,'favorite_mangas')                                                  \\n                            \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(167, \"\\n                        \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(168, \"button\", 15);\n        i0.ɵɵtext(169, \" Copy \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(170, \"p\");\n        i0.ɵɵtext(171, \"Don't forget read the \");\n        i0.ɵɵelementStart(172, \"a\", 21);\n        i0.ɵɵtext(173, \"ES documentation for python\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(174, \"div\", 22)(175, \"h2\");\n        i0.ɵɵtext(176, \"Restoring indices from snapshots\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(177, \"p\");\n        i0.ɵɵtext(178, \" Finally, it is possible restore indices from snapshots. To do this we can delete docker-compose image using \\\"docker compose down -v\\\" in terminal, and repeat all steps until before creating a new index, that just take a few minutes and it's a good practice. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(179, \"p\");\n        i0.ɵɵtext(180, \" Before continue, here is a usefull list of function to list repositories, snapshots and indices in our instance. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(181, \"div\", 12)(182, \"div\", 13)(183, \"pre\");\n        i0.ɵɵtext(184, \"                            \");\n        i0.ɵɵelementStart(185, \"code\", 14);\n        i0.ɵɵtext(186, \"   \\n                                def list_repositories(conn):\\n                                    # List snapshot repositories\\n                                    repositories = conn.snapshot.get_repository()\\n                                    print(\\\"Snapshot Repositories:\\\")\\n                                    for repo_name in repositories:\\n                                        print(repo_name)      \\n                                            \\n                                def list_snapshots(conn):\\n                                    # List snapshots\\n                                    repository_name = 'my_fs_backup'\\n                                    snapshot_repository = conn.snapshot.get_repository(repository=repository_name)\\n                                    snapshot_repository_name = snapshot_repository[repository_name]['type']\\n\\n                                    snapshots = conn.snapshot.get(repository=repository_name, snapshot='_all')\\n                                    print(\\\"Snapshots:\\\")\\n                                    for snapshot in snapshots['snapshots']:\\n                                        print(snapshot['snapshot'])\\n                                        \\n                                def list_indices(conn):\\n                                    indices = conn.indices.get('*')\\n                                    print(\\\"Indices:\\\")\\n                                    print(indices.keys())    \\n                            \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(187, \"\\n                        \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(188, \"button\", 15);\n        i0.ɵɵtext(189, \" Copy \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(190, \"p\");\n        i0.ɵɵtext(191, \" When a snapshot is restored it's necessary indicate a existing repository, don't forget. The code is as follow, first the restoring snapshot function \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(192, \"div\", 12)(193, \"div\", 13)(194, \"pre\");\n        i0.ɵɵtext(195, \"                            \");\n        i0.ɵɵelementStart(196, \"code\", 14);\n        i0.ɵɵtext(197, \"   \\n                                def restore_snapshot(conn,snapshot_name,index_name):\\n\\n                                    # Snapshot repository name\\n                                    repository_name = 'my_fs_backup'\\n                                        \\n                                    # Restore the snapshot\\n                                    response = conn.snapshot.restore(repository=repository_name, snapshot=snapshot_name, body={\\n                                        \\\"indices\\\": index_name\\n                                    }, request_timeout=300)\\n                                    print(response)\\n                            \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(198, \"\\n                        \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(199, \"button\", 15);\n        i0.ɵɵtext(200, \" Copy \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(201, \"div\", 12)(202, \"div\", 13)(203, \"pre\");\n        i0.ɵɵtext(204, \"                            \");\n        i0.ɵɵelementStart(205, \"code\", 14);\n        i0.ɵɵtext(206, \"   \\n                                create_repository()\\n                                restore_snapshot(conn,'favorite_mangas_snapshot','favorite_mangas')\\n                            \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(207, \"\\n                        \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(208, \"button\", 15);\n        i0.ɵɵtext(209, \" Copy \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(210, \"p\");\n        i0.ɵɵtext(211, \"The last part is query the info in the 'favorite_mangas' index, we can try\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(212, \"div\", 12)(213, \"div\", 13)(214, \"pre\");\n        i0.ɵɵtext(215, \"                            \");\n        i0.ɵɵelementStart(216, \"code\", 14);\n        i0.ɵɵtext(217, \"   \\n                                result=conn.search(index='my_first_index',body={'query':{'match_all':{}}} )\\n                                for register in result['hits']['hits']:\\n                                    print(register['_source'])\\n                            \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(218, \"\\n                        \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(219, \"button\", 15);\n        i0.ɵɵtext(220, \" Copy \");\n        i0.ɵɵelementEnd()()()()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"tableOfContents\", ctx.tableOfContents);\n      }\n    },\n    dependencies: [i1.HeaderComponent, i2.TableOfContentsComponent],\n    styles: [\".global[_ngcontent-%COMP%]{display:flex;flex-direction:row;width:100%;height:90vh;background-color:#000;position:relative}.toc[_ngcontent-%COMP%]{display:flex;flex:1.1}.content[_ngcontent-%COMP%]{padding:2.1%;flex:3.5;border-style:groove;border-color:gray;border-top-right-radius:20px;border-bottom-right-radius:20px;background-color:#fff;overflow-y:scroll}ul[_ngcontent-%COMP%]{list-style:none;padding:0;margin:0}li[_ngcontent-%COMP%]{margin-top:8%}a[_ngcontent-%COMP%]{text-decoration:none;color:gray}a[_ngcontent-%COMP%]:hover{-webkit-text-decoration:solid;text-decoration:solid}a[href^=\\\"#\\\"][_ngcontent-%COMP%]{transition-duration:10000s}#section1[_ngcontent-%COMP%], #section2[_ngcontent-%COMP%], #section3[_ngcontent-%COMP%], #section4[_ngcontent-%COMP%], #section5[_ngcontent-%COMP%], #section6[_ngcontent-%COMP%], #section7[_ngcontent-%COMP%], #section8[_ngcontent-%COMP%]{padding:20px;margin-bottom:20px}.container[_ngcontent-%COMP%]{width:90%;height:100%;overflow:auto;border-radius:12px;margin-left:10%}[language-python^=\\\"[_ngcontent-%COMP%]{{ }}\\\"][_ngcontent-%COMP%]{display:none}.code-wrapper[_ngcontent-%COMP%]{position:relative}#copy-button[_ngcontent-%COMP%]{position:absolute;top:8px;right:8px;padding:7px;background-color:#2d2d2d;outline:none;color:#fff;border-radius:8px;cursor:pointer;transition:all .2s ease-in;opacity:0;border:1px solid antiquewhite}#copy-button.show-msg[_ngcontent-%COMP%]{display:none}#copy-button[_ngcontent-%COMP%]:hover{background-color:#423e3e}.code-wrapper[_ngcontent-%COMP%]:hover   #copy-button[_ngcontent-%COMP%]{opacity:1}p[_ngcontent-%COMP%]{text-indent:2em}\"]\n  });\n  return ElasticDockerComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}