{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../header/header.component\";\nimport * as i2 from \"../table-of-contents/table-of-contents.component\";\nimport * as i3 from \"../code-box/code-box.component\";\nexport class MysqlComponent {\n  constructor() {\n    this.tableOfContents = [['section1', 'Introduction'], ['section2', 'MySQL Installation'], ['section3', 'Connection from Code OSS'], ['section4', 'Connection from Python'], ['section5', 'Backup and Restore Databases']];\n    this.sections = [[]];\n  }\n  ngOnInit() {\n    this.loadScript('./assets/prism.js', 'js');\n    window.onload = () => {\n      this.loadScript('./assets/main.js', 'js');\n    };\n  }\n  loadScript(scriptUrl, Tipo) {\n    if (Tipo == 'js') {\n      const script = document.createElement('script');\n      script.type = 'text/javascript';\n      script.src = scriptUrl;\n      document.body.appendChild(script);\n    } else if (Tipo === 'css') {\n      const link = document.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      link.href = scriptUrl;\n      document.head.appendChild(link);\n    }\n  }\n  scrollToSection(elementId) {\n    const elementToScrollTo = document.getElementById(elementId);\n    if (elementToScrollTo) {\n      elementToScrollTo.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }\n}\nMysqlComponent.ɵfac = function MysqlComponent_Factory(t) {\n  return new (t || MysqlComponent)();\n};\nMysqlComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MysqlComponent,\n  selectors: [[\"app-mysql\"]],\n  decls: 88,\n  vars: 1,\n  consts: [[\"lang\", \"en\"], [\"charset\", \"UTF-8\"], [\"name\", \"viewport\", \"content\", \"width=device-width, initial-scale=1.0\"], [1, \"global\"], [1, \"toc\"], [3, \"tableOfContents\", \"scrollToElement\"], [1, \"content\"], [\"id\", \"section1\"], [\"href\", \"https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html\"], [\"href\", \"https://github.com/lmdcma27/elastic-docker\", \"target\", \"_blank\", 2, \"color\", \"green\"], [\"id\", \"section2\"], [\"code\", \"version: '3.9'\\n                services:\\n                    es01:\\n                        container_name: es01\\n                        image: docker.elastic.co/elasticsearch/elasticsearch:8.8.2\\n                        environment: \\n                            - discovery.type=single-node\\n                            - path.repo=/usr/share/elasticsearch/backups\\n                        restart: always\\n                        ports:\\n                            - 9200:9200\\n                        networks:\\n                            - elastic\\n                        volumes:\\n                            - es_data:/usr/share/elasticsearch/data\\n                            - ./backups:/usr/share/elasticsearch/backups\\n\\n                    kibana:\\n                        container_name: kibana\\n                        image: docker.elastic.co/kibana/kibana:8.8.2\\n                        restart: always\\n                        ports:\\n                            - 5601:5601\\n                        networks:\\n                            - elastic\\n\\n                volumes:\\n                    es_data:\\n                networks:\\n                    elastic:\"], [\"id\", \"section3\"], [\"code\", \"pip install elasticsearch==7.13.4   \"], [1, \"container\"], [1, \"code-wrapper\"], [\"code\", \"\", \"id\", \"code\", 1, \"language-python\"], [\"id\", \"copy-button\"], [\"src\", \"./assets/images/elasticdocker/pastetoken.png\", \"alt\", \"\", 2, \"display\", \"block\", \"margin-left\", \"auto\", \"margin-right\", \"auto\"], [\"src\", \"./assets/images/elasticdocker/codeverification.png\", \"alt\", \"\", 2, \"display\", \"block\", \"margin-left\", \"auto\", \"margin-right\", \"auto\"], [\"src\", \"./assets/images/elasticdocker/apikey.png\", \"alt\", \"\", 2, \"display\", \"block\", \"margin-left\", \"auto\", \"margin-right\", \"auto\"], [\"code\", \"{'name': '349860b1705d', \\n                'cluster_name': 'docker-cluster', \\n                'cluster_uuid': 'ChyUT4WjR4GJ9S3fcqsMZQ', \\n                'version': {'number': '8.8.2', \\n                  'build_flavor': 'default', \\n                  'build_type': 'docker', \\n                  'build_hash': '98e1271edf932a480e4262a471281f1ee295ce6b', \\n                  'build_date': '2023-06-26T05:16:16.196344851Z', \\n                  'build_snapshot': False, 'lucene_version': '9.6.0', \\n                  'minimum_wire_compatibility_version': '7.17.0', \\n                  'minimum_index_compatibility_version': '7.0.0'\\n                  }, \\n                'tagline': 'You Know, for Search'\\n          }\"]],\n  template: function MysqlComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"html\", 0)(1, \"head\");\n      i0.ɵɵelement(2, \"meta\", 1)(3, \"meta\", 2);\n      i0.ɵɵelementStart(4, \"title\");\n      i0.ɵɵtext(5, \"Document\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(6, \"body\");\n      i0.ɵɵelement(7, \"app-header\");\n      i0.ɵɵelementStart(8, \"div\", 3)(9, \"div\", 4)(10, \"app-table-of-contents\", 5);\n      i0.ɵɵlistener(\"scrollToElement\", function MysqlComponent_Template_app_table_of_contents_scrollToElement_10_listener($event) {\n        return ctx.scrollToSection($event);\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(11, \"div\", 6)(12, \"div\", 7)(13, \"h2\");\n      i0.ɵɵtext(14, \"Introduction\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"p\");\n      i0.ɵɵtext(16, \" This time we going to create a ElasticSeach (ES) instance using docker, learn how to push our data in ES indices and how to make snapshots (backups) in a local binding folder. Finally we'll restore the example indices in another ES instance. For more details see \");\n      i0.ɵɵelementStart(17, \"a\", 8);\n      i0.ɵɵtext(18, \"ElasticSearch \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(19, \". All source code is in the \");\n      i0.ɵɵelementStart(20, \"a\", 9);\n      i0.ɵɵtext(21, \"github repository\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(22, \"div\", 10)(23, \"h2\");\n      i0.ɵɵtext(24, \"Docker compose file\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(25, \"p\");\n      i0.ɵɵtext(26, \"The first thing to do is create the instance copy and paste the code below into a yaml file callled 'docker-compose.yaml', or '.yml'.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(27, \"app-code-box\", 11);\n      i0.ɵɵtext(28, \" When the building of the container has finished, we find a folder called 'backups' beside we docker-compose.yaml file \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(29, \"div\", 12)(30, \"h2\");\n      i0.ɵɵtext(31, \"Connection\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(32, \"p\");\n      i0.ɵɵtext(33, \" The connection will be with python using the library elasticsearch, the '7.13.4' version works fine. We can install it in our python environment: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(34, \"app-code-box\", 13);\n      i0.ɵɵtext(35, \" Before the connection, we need the token, password and api key. Open terminal, for the token run: \");\n      i0.ɵɵelementStart(36, \"div\", 14)(37, \"div\", 15)(38, \"pre\");\n      i0.ɵɵtext(39, \"                            \");\n      i0.ɵɵelementStart(40, \"code\", 16);\n      i0.ɵɵtext(41, \"   \\n                                sudo docker exec -it es01 /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s kibana\\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(42, \"\\n                        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(43, \"button\", 17);\n      i0.ɵɵtext(44, \" Copy \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵtext(45, \" and for the password: \");\n      i0.ɵɵelementStart(46, \"div\", 14)(47, \"div\", 15)(48, \"pre\");\n      i0.ɵɵtext(49, \"                            \");\n      i0.ɵɵelementStart(50, \"code\", 16);\n      i0.ɵɵtext(51, \"   \\n                                sudo docker exec -it es01 /usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic\\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(52, \"\\n                        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(53, \"button\", 17);\n      i0.ɵɵtext(54, \" Copy \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵtext(55, \" then enter 'y' in the terminal. \");\n      i0.ɵɵelement(56, \"br\");\n      i0.ɵɵelementStart(57, \"p\");\n      i0.ɵɵtext(58, \" Now, in the 'localhost:5601' we can paste the required token. Kibana gives a verification code of 6 digits and we can get from terminal keyboarding 'docker logs kibana' . After that, we login with password and user 'elastic' \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(59, \"img\", 18)(60, \"img\", 19);\n      i0.ɵɵelementStart(61, \"p\");\n      i0.ɵɵtext(62, \" Once in kibana interface, go to the endpoint 'http://localhost:5601/app/management/security/api_keys/', click on 'Create API key' button, assign a name and copy as json.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(63, \"img\", 20);\n      i0.ɵɵelementStart(64, \"p\");\n      i0.ɵɵtext(65, \" The connection function is \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(66, \"div\", 14)(67, \"div\", 15)(68, \"pre\");\n      i0.ɵɵtext(69, \"                                \");\n      i0.ɵɵelementStart(70, \"code\", 16);\n      i0.ɵɵtext(71, \" \\n                                    from elasticsearch import Elasticsearch\\n                                    import warnings\\n                                    warnings.filterwarnings(\\\"ignore\\\")    \\n                                    def Connection(es_host:str,es_user:str,es_password:str,api_key:tuple):\\n                                        es = Elasticsearch( hosts=[es_host],\\n                                                            basic_auth=(es_user, es_password), \\n                                                            verify_certs=False,\\n                                                            api_key=api_key\\n                                        )\\n                                        return es                \\n                                \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(72, \"\\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(73, \"button\", 17);\n      i0.ɵɵtext(74, \" Copy \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(75, \"p\");\n      i0.ɵɵtext(76, \"So, we can verify the connection\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(77, \"div\", 14)(78, \"div\", 15)(79, \"pre\");\n      i0.ɵɵtext(80, \"                                \");\n      i0.ɵɵelementStart(81, \"code\", 16);\n      i0.ɵɵtext(82, \"   \\n                                    api_key=('api_id','api_key')\\n                                    conn=Connection('https://localhost:9200/','elastic','password',api_key)\\n                                    print(conn.info())\\n                                \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(83, \"\\n                            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(84, \"button\", 17);\n      i0.ɵɵtext(85, \" Copy \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵtext(86, \" and get something like this \");\n      i0.ɵɵelement(87, \"app-code-box\", 21);\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"tableOfContents\", ctx.tableOfContents);\n    }\n  },\n  dependencies: [i1.HeaderComponent, i2.TableOfContentsComponent, i3.CodeBoxComponent],\n  styles: [\".global[_ngcontent-%COMP%] {\\n    display: flex;\\n    flex-direction: row;\\n    width: 100%;\\n    height: 90vh;\\n    background-color: black;\\n    position: relative;\\n}\\n\\n.toc[_ngcontent-%COMP%] {\\n    display: flex;\\n    flex: 1.1;\\n}\\n\\n.content[_ngcontent-%COMP%] {\\n    padding: 2.1%;\\n    flex: 3.5;\\n    border-style: groove;\\n    border-color: grey;\\n    border-top-right-radius: 20px;\\n    border-bottom-right-radius: 20px;\\n    background-color: white;\\n    overflow-y: scroll;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9teXNxbC9teXNxbC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksYUFBYTtJQUNiLG1CQUFtQjtJQUNuQixXQUFXO0lBQ1gsWUFBWTtJQUNaLHVCQUF1QjtJQUN2QixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsU0FBUztBQUNiOztBQUVBO0lBQ0ksYUFBYTtJQUNiLFNBQVM7SUFDVCxvQkFBb0I7SUFDcEIsa0JBQWtCO0lBQ2xCLDZCQUE2QjtJQUM3QixnQ0FBZ0M7SUFDaEMsdUJBQXVCO0lBQ3ZCLGtCQUFrQjtBQUN0QiIsInNvdXJjZXNDb250ZW50IjpbIi5nbG9iYWwge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDkwdmg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuXG4udG9jIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXg6IDEuMTtcbn1cblxuLmNvbnRlbnQge1xuICAgIHBhZGRpbmc6IDIuMSU7XG4gICAgZmxleDogMy41O1xuICAgIGJvcmRlci1zdHlsZTogZ3Jvb3ZlO1xuICAgIGJvcmRlci1jb2xvcjogZ3JleTtcbiAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMjBweDtcbiAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMjBweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICBvdmVyZmxvdy15OiBzY3JvbGw7XG59XG5cblxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["MysqlComponent","constructor","ngOnInit","loadScript","window","onload","scriptUrl","Tipo","script","document","createElement","type","src","body","appendChild","link","rel","href","head","scrollToSection","elementId","elementToScrollTo","getElementById","scrollIntoView","behavior","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/home/lmdc/Documents/WebPage/src/app/components/mysql/mysql.component.ts","/home/lmdc/Documents/WebPage/src/app/components/mysql/mysql.component.html"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-mysql',\n  templateUrl: './mysql.component.html',\n  styleUrls: ['./mysql.component.css']\n})\nexport class MysqlComponent {\n  \n\n  tableOfContents: Array<string>[]= [\n    ['section1','Introduction'],\n    ['section2','MySQL Installation'],\n    ['section3','Connection from Code OSS'],\n    ['section4','Connection from Python'],\n    ['section5','Backup and Restore Databases']\n  ];\n\n  sections: Array<string>[]=[\n    []\n  ]\n\n  ngOnInit() {      \n    this.loadScript('./assets/prism.js', 'js');\n    window.onload = () => {\n      this.loadScript('./assets/main.js', 'js');\n    };\n  }\n\n  loadScript(scriptUrl: string,Tipo: string) {\n    if (Tipo=='js'){\n      const script = document.createElement('script');\n      script.type = 'text/javascript';\n      script.src = scriptUrl;\n      document.body.appendChild(script);\n    }  else if (Tipo === 'css') {\n      const link = document.createElement('link');\n      link.rel='stylesheet'\n      link.type = 'text/css';\n      link.href = scriptUrl;\n      document.head.appendChild(link);\n    }   \n  }\n\n  scrollToSection(elementId: string): void {\n    const elementToScrollTo = document.getElementById(elementId);\n    if (elementToScrollTo) {\n      elementToScrollTo.scrollIntoView({ behavior: 'smooth' });\n    }\n  }\n\n\n}\n","<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <app-header></app-header>\n\n    <div class=\"global\">\n        <div class=\"toc\">\n            <app-table-of-contents [tableOfContents]=\"tableOfContents\"\n                (scrollToElement)=\"scrollToSection($event)\"></app-table-of-contents>\n        </div>\n\n        <div class=\"content\">\n            <div id=\"section1\">\n                <h2>Introduction</h2>\n                <p>\n                    This time we going to create a ElasticSeach (ES) instance using docker, learn\n                    how to push our data\n                    in ES indices and how to make snapshots (backups) in a local binding folder.\n                    Finally we'll restore the example indices\n                    in another ES instance. For more details see <a\n                        href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html\">ElasticSearch\n                    </a>. All source code is in the <a href=\"https://github.com/lmdcma27/elastic-docker\" style=\"color: green;\" target=\"_blank\">github repository</a>\n                </p>\n            </div>\n            <div id=\"section2\">\n                <h2>Docker compose file</h2>\n                <p>The first thing to do is create the instance copy and paste the code below into a\n                    yaml file callled 'docker-compose.yaml', or '.yml'.</p>\n                <app-code-box code=\"version: '3.9'\n                services:\n                    es01:\n                        container_name: es01\n                        image: docker.elastic.co/elasticsearch/elasticsearch:8.8.2\n                        environment: \n                            - discovery.type=single-node\n                            - path.repo=/usr/share/elasticsearch/backups\n                        restart: always\n                        ports:\n                            - 9200:9200\n                        networks:\n                            - elastic\n                        volumes:\n                            - es_data:/usr/share/elasticsearch/data\n                            - ./backups:/usr/share/elasticsearch/backups\n\n                    kibana:\n                        container_name: kibana\n                        image: docker.elastic.co/kibana/kibana:8.8.2\n                        restart: always\n                        ports:\n                            - 5601:5601\n                        networks:\n                            - elastic\n\n                volumes:\n                    es_data:\n                networks:\n                    elastic:\" ></app-code-box>\n                When the building of the container has finished, we find a folder called 'backups' beside we\n                docker-compose.yaml file\n            </div>\n            <div id=\"section3\">\n                <h2>Connection</h2>\n                <p>\n                    The connection will be with python using the library elasticsearch, the '7.13.4' version works fine.\n                    We can install it in our\n                    python environment:\n                </p>\n                <app-code-box code=\"pip install elasticsearch==7.13.4   \" ></app-code-box>\n                Before the connection, we need the token, password and api key. Open terminal, for the token run:\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                            <code code id=\"code\" class=\"language-python\">   \n                                sudo docker exec -it es01 /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s kibana\n                            </code>\n                        </pre>\n                        <button id=\"copy-button\">\n                            Copy\n                        </button>\n                    </div>\n                </div>\n                and for the password:\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                            <code code id=\"code\" class=\"language-python\">   \n                                sudo docker exec -it es01 /usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic\n                            </code>\n                        </pre>\n                        <button id=\"copy-button\">\n                            Copy\n                        </button>\n                    </div>\n                </div>\n                then enter 'y' in the terminal.\n                <br>\n                <p>\n                    Now, in the 'localhost:5601' we can paste the required token. Kibana gives a verification code of 6\n                    digits and we can get from terminal keyboarding 'docker logs kibana' . After that, we login with\n                    password and\n                    user 'elastic'\n                </p>\n                <img src=\"./assets/images/elasticdocker/pastetoken.png\"\n                    style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\">\n                <img src=\"./assets/images/elasticdocker/codeverification.png\"\n                    style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\">\n\n                <p> Once in kibana interface, go to the endpoint\n                    'http://localhost:5601/app/management/security/api_keys/', click on 'Create API key' button, assign\n                    a name and copy as json.</p>\n                <img src=\"./assets/images/elasticdocker/apikey.png\"\n                    style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\">\n                <p>\n                    The connection function is\n                </p>\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                                <code code id=\"code\" class=\"language-python\"> \n                                    from elasticsearch import Elasticsearch\n                                    import warnings\n                                    warnings.filterwarnings(\"ignore\")    \n                                    def Connection(es_host:str,es_user:str,es_password:str,api_key:tuple):\n                                        es = Elasticsearch( hosts=[es_host],\n                                                            basic_auth=(es_user, es_password), \n                                                            verify_certs=False,\n                                                            api_key=api_key\n                                        )\n                                        return es                \n                                </code>\n                            </pre>\n                        <button id=\"copy-button\">\n                            Copy\n                        </button>\n                    </div>\n                </div>\n                <p>So, we can verify the connection</p>\n\n                <div class=\"container\">\n                    <div class=\"code-wrapper\">\n                        <pre>\n                                <code code id=\"code\" class=\"language-python\">   \n                                    api_key=('api_id','api_key')\n                                    conn=Connection('https://localhost:9200/','elastic','password',api_key)\n                                    print(conn.info())\n                                </code>\n                            </pre>\n                        <button id=\"copy-button\">\n                            Copy\n                        </button>\n                    </div>\n                </div>\n                and get something like this\n                <app-code-box code=\"&#123;'name': '349860b1705d', \n                'cluster_name': 'docker-cluster', \n                'cluster_uuid': 'ChyUT4WjR4GJ9S3fcqsMZQ', \n                'version': &#123;'number': '8.8.2', \n                  'build_flavor': 'default', \n                  'build_type': 'docker', \n                  'build_hash': '98e1271edf932a480e4262a471281f1ee295ce6b', \n                  'build_date': '2023-06-26T05:16:16.196344851Z', \n                  'build_snapshot': False, 'lucene_version': '9.6.0', \n                  'minimum_wire_compatibility_version': '7.17.0', \n                  'minimum_index_compatibility_version': '7.0.0'\n                  &#125;, \n                'tagline': 'You Know, for Search'\n          &#125;\" ></app-code-box>\n            </div>\n        </div>\n    </div>\n</body>\n</html>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}