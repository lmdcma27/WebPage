import { Directive, Input, Output, Inject, Optional, EventEmitter, PLATFORM_ID, SecurityContext } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { animationFrameScheduler } from 'rxjs';
import { HIGHLIGHT_OPTIONS } from './highlight.model';
import { trustedHTMLFromStringBypass } from './trusted-types';
import * as i0 from "@angular/core";
import * as i1 from "./highlight.service";
import * as i2 from "@angular/platform-browser";
export class Highlight {
    constructor(el, _hljs, _sanitizer, platformId, _options) {
        this._hljs = _hljs;
        this._sanitizer = _sanitizer;
        this.platformId = platformId;
        this._options = _options;
        // Stream that emits when code string is highlighted
        this.highlighted = new EventEmitter();
        this._nativeElement = el.nativeElement;
    }
    ngOnChanges(changes) {
        if (isPlatformBrowser(this.platformId) &&
            changes?.code?.currentValue !== null &&
            changes.code.currentValue !== changes.code.previousValue) {
            if (this.code) {
                this.highlightElement(this.code, this.languages);
            }
            else {
                // If string is empty, set the text content to empty
                this.setTextContent('');
            }
        }
    }
    /**
     * Highlighting with language detection and fix markup.
     * @param code Accepts a string with the code to highlight
     * @param languages An optional array of language names and aliases restricting detection to only those languages.
     * The subset can also be set with configure, but the local parameter overrides the option if set.
     */
    highlightElement(code, languages) {
        // Set code text before highlighting
        this.setTextContent(code);
        this._hljs.highlightAuto(code, languages).subscribe((res) => {
            // Set highlighted code
            this.setInnerHTML(res?.value);
            // Check if user want to show line numbers
            if (this.lineNumbers && this._options && this._options.lineNumbersLoader) {
                this.addLineNumbers();
            }
            // Forward highlight response to the highlighted output
            this.highlighted.emit(res);
        });
    }
    addLineNumbers() {
        // Clean up line numbers observer
        this.destroyLineNumbersObserver();
        animationFrameScheduler.schedule(() => {
            // Add line numbers
            this._hljs.lineNumbersBlock(this._nativeElement).subscribe();
            // If lines count is 1, the line numbers library will not add numbers
            // Observe changes to add 'hljs-line-numbers' class only when line numbers is added to the code element
            this._lineNumbersObs = new MutationObserver(() => {
                if (this._nativeElement.firstElementChild && this._nativeElement.firstElementChild.tagName.toUpperCase() === 'TABLE') {
                    this._nativeElement.classList.add('hljs-line-numbers');
                }
                this.destroyLineNumbersObserver();
            });
            this._lineNumbersObs.observe(this._nativeElement, { childList: true });
        });
    }
    destroyLineNumbersObserver() {
        if (this._lineNumbersObs) {
            this._lineNumbersObs.disconnect();
            this._lineNumbersObs = null;
        }
    }
    setTextContent(content) {
        animationFrameScheduler.schedule(() => this._nativeElement.textContent = content);
    }
    setInnerHTML(content) {
        animationFrameScheduler.schedule(() => this._nativeElement.innerHTML = trustedHTMLFromStringBypass(this._sanitizer.sanitize(SecurityContext.HTML, content) || ''));
    }
}
Highlight.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.2", ngImport: i0, type: Highlight, deps: [{ token: i0.ElementRef }, { token: i1.HighlightJS }, { token: i2.DomSanitizer }, { token: PLATFORM_ID }, { token: HIGHLIGHT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
Highlight.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.1.2", type: Highlight, selector: "[highlight]", inputs: { code: ["highlight", "code"], languages: "languages", lineNumbers: "lineNumbers" }, outputs: { highlighted: "highlighted" }, host: { properties: { "class.hljs": "true" } }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.2", ngImport: i0, type: Highlight, decorators: [{
            type: Directive,
            args: [{
                    host: {
                        '[class.hljs]': 'true'
                    },
                    selector: '[highlight]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.HighlightJS }, { type: i2.DomSanitizer }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [HIGHLIGHT_OPTIONS]
                }] }]; }, propDecorators: { code: [{
                type: Input,
                args: ['highlight']
            }], languages: [{
                type: Input
            }], lineNumbers: [{
                type: Input
            }], highlighted: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWhpZ2hsaWdodGpzL3NyYy9saWIvaGlnaGxpZ2h0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUNMLE1BQU0sRUFDTixNQUFNLEVBQ04sUUFBUSxFQUNSLFlBQVksRUFDWixXQUFXLEVBSVgsZUFBZSxFQUNoQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVwRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFL0MsT0FBTyxFQUFFLGlCQUFpQixFQUF5QyxNQUFNLG1CQUFtQixDQUFDO0FBQzdGLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7O0FBUTlELE1BQU0sT0FBTyxTQUFTO0lBcUJwQixZQUFZLEVBQWMsRUFDTixLQUFrQixFQUNsQixVQUF3QixFQUNILFVBQWtCLEVBQ0EsUUFBMEI7UUFIakUsVUFBSyxHQUFMLEtBQUssQ0FBYTtRQUNsQixlQUFVLEdBQVYsVUFBVSxDQUFjO1FBQ0gsZUFBVSxHQUFWLFVBQVUsQ0FBUTtRQUNBLGFBQVEsR0FBUixRQUFRLENBQWtCO1FBUHJGLG9EQUFvRDtRQUMxQyxnQkFBVyxHQUFHLElBQUksWUFBWSxFQUF1QixDQUFDO1FBTzlELElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQztJQUN6QyxDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQ0UsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztZQUNsQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFlBQVksS0FBSyxJQUFJO1lBQ3BDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxLQUFLLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxF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RkF6QnRDLFNBQVM7MkZBQVQsU0FBUztrQkFOckIsU0FBUzttQkFBQztvQkFDVCxJQUFJLEVBQUU7d0JBQ0osY0FBYyxFQUFFLE1BQU07cUJBQ3ZCO29CQUNELFFBQVEsRUFBRSxhQUFhO2lCQUN4Qjs7MEJBeUJjLE1BQU07MkJBQUMsV0FBVzs7MEJBQ2xCLFFBQVE7OzBCQUFJLE1BQU07MkJBQUMsaUJBQWlCOzRDQWhCN0IsSUFBSTtzQkFBdkIsS0FBSzt1QkFBQyxXQUFXO2dCQUlULFNBQVM7c0JBQWpCLEtBQUs7Z0JBR0csV0FBVztzQkFBbkIsS0FBSztnQkFHSSxXQUFXO3NCQUFwQixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBEaXJlY3RpdmUsXHJcbiAgSW5wdXQsXHJcbiAgT3V0cHV0LFxyXG4gIEluamVjdCxcclxuICBPcHRpb25hbCxcclxuICBFdmVudEVtaXR0ZXIsXHJcbiAgUExBVEZPUk1fSUQsXHJcbiAgT25DaGFuZ2VzLFxyXG4gIFNpbXBsZUNoYW5nZXMsXHJcbiAgRWxlbWVudFJlZixcclxuICBTZWN1cml0eUNvbnRleHRcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNQbGF0Zm9ybUJyb3dzZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuaW1wb3J0IHsgYW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgSGlnaGxpZ2h0SlMgfSBmcm9tICcuL2hpZ2hsaWdodC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgSElHSExJR0hUX09QVElPTlMsIEhpZ2hsaWdodE9wdGlvbnMsIEhpZ2hsaWdodEF1dG9SZXN1bHQgfSBmcm9tICcuL2hpZ2hsaWdodC5tb2RlbCc7XHJcbmltcG9ydCB7IHRydXN0ZWRIVE1MRnJvbVN0cmluZ0J5cGFzcyB9IGZyb20gJy4vdHJ1c3RlZC10eXBlcyc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBob3N0OiB7XHJcbiAgICAnW2NsYXNzLmhsanNdJzogJ3RydWUnXHJcbiAgfSxcclxuICBzZWxlY3RvcjogJ1toaWdobGlnaHRdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSGlnaGxpZ2h0IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuXHJcbiAgLy8gSGlnaGxpZ2h0ZWQgQ29kZVxyXG4gIHByaXZhdGUgcmVhZG9ubHkgX25hdGl2ZUVsZW1lbnQ6IEhUTUxFbGVtZW50O1xyXG5cclxuICAvLyBUZW1wIG9ic2VydmVyIHRvIG9ic2VydmUgd2hlbiBsaW5lIG51bWJlcnMgaGFzIGJlZW4gYWRkZWQgdG8gY29kZSBlbGVtZW50XHJcbiAgcHJpdmF0ZSBfbGluZU51bWJlcnNPYnM6IGFueTtcclxuXHJcbiAgLy8gSGlnaGxpZ2h0IGNvZGUgaW5wdXRcclxuICBASW5wdXQoJ2hpZ2hsaWdodCcpIGNvZGU6IHN0cmluZyB8IG51bGw7XHJcblxyXG4gIC8vIEFuIG9wdGlvbmFsIGFycmF5IG9mIGxhbmd1YWdlIG5hbWVzIGFuZCBhbGlhc2VzIHJlc3RyaWN0aW5nIGRldGVjdGlvbiB0byBvbmx5IHRob3NlIGxhbmd1YWdlcy5cclxuICAvLyBUaGUgc3Vic2V0IGNhbiBhbHNvIGJlIHNldCB3aXRoIGNvbmZpZ3VyZSwgYnV0IHRoZSBsb2NhbCBwYXJhbWV0ZXIgb3ZlcnJpZGVzIHRoZSBvcHRpb24gaWYgc2V0LlxyXG4gIEBJbnB1dCgpIGxhbmd1YWdlcyE6IHN0cmluZ1tdO1xyXG5cclxuICAvLyBTaG93IGxpbmUgbnVtYmVyc1xyXG4gIEBJbnB1dCgpIGxpbmVOdW1iZXJzITogYm9vbGVhbjtcclxuXHJcbiAgLy8gU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiBjb2RlIHN0cmluZyBpcyBoaWdobGlnaHRlZFxyXG4gIEBPdXRwdXQoKSBoaWdobGlnaHRlZCA9IG5ldyBFdmVudEVtaXR0ZXI8SGlnaGxpZ2h0QXV0b1Jlc3VsdD4oKTtcclxuXHJcbiAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSBfaGxqczogSGlnaGxpZ2h0SlMsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSBfc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsXHJcbiAgICAgICAgICAgICAgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybUlkOiBvYmplY3QsXHJcbiAgICAgICAgICAgICAgQE9wdGlvbmFsKCkgQEluamVjdChISUdITElHSFRfT1BUSU9OUykgcHJpdmF0ZSBfb3B0aW9uczogSGlnaGxpZ2h0T3B0aW9ucykge1xyXG4gICAgdGhpcy5fbmF0aXZlRWxlbWVudCA9IGVsLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICBpZiAoXHJcbiAgICAgIGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkgJiZcclxuICAgICAgY2hhbmdlcz8uY29kZT8uY3VycmVudFZhbHVlICE9PSBudWxsICYmXHJcbiAgICAgIGNoYW5nZXMuY29kZS5jdXJyZW50VmFsdWUgIT09IGNoYW5nZXMuY29kZS5wcmV2aW91c1ZhbHVlXHJcbiAgICApIHtcclxuICAgICAgaWYgKHRoaXMuY29kZSkge1xyXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0RWxlbWVudCh0aGlzLmNvZGUsIHRoaXMubGFuZ3VhZ2VzKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBJZiBzdHJpbmcgaXMgZW1wdHksIHNldCB0aGUgdGV4dCBjb250ZW50IHRvIGVtcHR5XHJcbiAgICAgICAgdGhpcy5zZXRUZXh0Q29udGVudCgnJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEhpZ2hsaWdodGluZyB3aXRoIGxhbmd1YWdlIGRldGVjdGlvbiBhbmQgZml4IG1hcmt1cC5cclxuICAgKiBAcGFyYW0gY29kZSBBY2NlcHRzIGEgc3RyaW5nIHdpdGggdGhlIGNvZGUgdG8gaGlnaGxpZ2h0XHJcbiAgICogQHBhcmFtIGxhbmd1YWdlcyBBbiBvcHRpb25hbCBhcnJheSBvZiBsYW5ndWFnZSBuYW1lcyBhbmQgYWxpYXNlcyByZXN0cmljdGluZyBkZXRlY3Rpb24gdG8gb25seSB0aG9zZSBsYW5ndWFnZXMuXHJcbiAgICogVGhlIHN1YnNldCBjYW4gYWxzbyBiZSBzZXQgd2l0aCBjb25maWd1cmUsIGJ1dCB0aGUgbG9jYWwgcGFyYW1ldGVyIG92ZXJyaWRlcyB0aGUgb3B0aW9uIGlmIHNldC5cclxuICAgKi9cclxuICBoaWdobGlnaHRFbGVtZW50KGNvZGU6IHN0cmluZywgbGFuZ3VhZ2VzOiBzdHJpbmdbXSk6IHZvaWQge1xyXG4gICAgLy8gU2V0IGNvZGUgdGV4dCBiZWZvcmUgaGlnaGxpZ2h0aW5nXHJcbiAgICB0aGlzLnNldFRleHRDb250ZW50KGNvZGUpO1xyXG4gICAgdGhpcy5faGxqcy5oaWdobGlnaHRBdXRvKGNvZGUsIGxhbmd1YWdlcykuc3Vic2NyaWJlKChyZXM6IEhpZ2hsaWdodEF1dG9SZXN1bHQpID0+IHtcclxuICAgICAgLy8gU2V0IGhpZ2hsaWdodGVkIGNvZGVcclxuICAgICAgdGhpcy5zZXRJbm5lckhUTUwocmVzPy52YWx1ZSk7XHJcbiAgICAgIC8vIENoZWNrIGlmIHVzZXIgd2FudCB0byBzaG93IGxpbmUgbnVtYmVyc1xyXG4gICAgICBpZiAodGhpcy5saW5lTnVtYmVycyAmJiB0aGlzLl9vcHRpb25zICYmIHRoaXMuX29wdGlvbnMubGluZU51bWJlcnNMb2FkZXIpIHtcclxuICAgICAgICB0aGlzLmFkZExpbmVOdW1iZXJzKCk7XHJcbiAgICAgIH1cclxuICAgICAgLy8gRm9yd2FyZCBoaWdobGlnaHQgcmVzcG9uc2UgdG8gdGhlIGhpZ2hsaWdodGVkIG91dHB1dFxyXG4gICAgICB0aGlzLmhpZ2hsaWdodGVkLmVtaXQocmVzKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhZGRMaW5lTnVtYmVycygpIHtcclxuICAgIC8vIENsZWFuIHVwIGxpbmUgbnVtYmVycyBvYnNlcnZlclxyXG4gICAgdGhpcy5kZXN0cm95TGluZU51bWJlcnNPYnNlcnZlcigpO1xyXG4gICAgYW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIuc2NoZWR1bGUoKCkgPT4ge1xyXG4gICAgICAvLyBBZGQgbGluZSBudW1iZXJzXHJcbiAgICAgIHRoaXMuX2hsanMubGluZU51bWJlcnNCbG9jayh0aGlzLl9uYXRpdmVFbGVtZW50KS5zdWJzY3JpYmUoKTtcclxuICAgICAgLy8gSWYgbGluZXMgY291bnQgaXMgMSwgdGhlIGxpbmUgbnVtYmVycyBsaWJyYXJ5IHdpbGwgbm90IGFkZCBudW1iZXJzXHJcbiAgICAgIC8vIE9ic2VydmUgY2hhbmdlcyB0byBhZGQgJ2hsanMtbGluZS1udW1iZXJzJyBjbGFzcyBvbmx5IHdoZW4gbGluZSBudW1iZXJzIGlzIGFkZGVkIHRvIHRoZSBjb2RlIGVsZW1lbnRcclxuICAgICAgdGhpcy5fbGluZU51bWJlcnNPYnMgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigoKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuX25hdGl2ZUVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQgJiYgdGhpcy5fbmF0aXZlRWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZC50YWdOYW1lLnRvVXBwZXJDYXNlKCkgPT09ICdUQUJMRScpIHtcclxuICAgICAgICAgIHRoaXMuX25hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaGxqcy1saW5lLW51bWJlcnMnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5kZXN0cm95TGluZU51bWJlcnNPYnNlcnZlcigpO1xyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5fbGluZU51bWJlcnNPYnMub2JzZXJ2ZSh0aGlzLl9uYXRpdmVFbGVtZW50LCB7IGNoaWxkTGlzdDogdHJ1ZSB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBkZXN0cm95TGluZU51bWJlcnNPYnNlcnZlcigpIHtcclxuICAgIGlmICh0aGlzLl9saW5lTnVtYmVyc09icykge1xyXG4gICAgICB0aGlzLl9saW5lTnVtYmVyc09icy5kaXNjb25uZWN0KCk7XHJcbiAgICAgIHRoaXMuX2xpbmVOdW1iZXJzT2JzID0gbnVsbDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2V0VGV4dENvbnRlbnQoY29udGVudDogc3RyaW5nKSB7XHJcbiAgICBhbmltYXRpb25GcmFtZVNjaGVkdWxlci5zY2hlZHVsZSgoKSA9PlxyXG4gICAgICB0aGlzLl9uYXRpdmVFbGVtZW50LnRleHRDb250ZW50ID0gY29udGVudFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2V0SW5uZXJIVE1MKGNvbnRlbnQ6IHN0cmluZyB8IG51bGwpIHtcclxuICAgIGFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyLnNjaGVkdWxlKCgpID0+XHJcbiAgICAgIHRoaXMuX25hdGl2ZUVsZW1lbnQuaW5uZXJIVE1MID0gdHJ1c3RlZEhUTUxGcm9tU3RyaW5nQnlwYXNzKFxyXG4gICAgICAgIHRoaXMuX3Nhbml0aXplci5zYW5pdGl6ZShTZWN1cml0eUNvbnRleHQuSFRNTCwgY29udGVudCkgfHwgJydcclxuICAgICAgKVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbiJdfQ==