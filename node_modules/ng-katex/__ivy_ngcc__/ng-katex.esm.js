import{Input as t,Output as e,Component as n,EventEmitter as r,Injectable as o,Directive as i,ElementRef as a,NgModule as p}from"@angular/core";import{extractMath as s}from"extract-math";import{CommonModule as c}from"@angular/common";import{render as u,renderToString as f}from"katex";import{DomSanitizer as g}from"@angular/platform-browser";import * as ɵngcc0 from '@angular/core';
function l(t,e,n,r){var o,i=arguments.length,a=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,n,r);else for(var p=t.length-1;p>=0;p--)(o=t[p])&&(a=(i<3?o(a):i>3?o(e,n,a):o(e,n))||a);return i>3&&a&&Object.defineProperty(e,n,a),a}function m(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}var y=function(){function o(){this.onError=new r}return o.prototype.hasError=function(t){this.onError.emit(t)},l([t(),m("design:type",String)],o.prototype,"equation",void 0),l([t(),m("design:type",Object)],o.prototype,"options",void 0),l([e(),m("design:type",Object)],o.prototype,"onError",void 0),o=l([n({selector:"ng-katex",template:'\n    <span [katex]="equation"\n          [katex-options]="options"\n          (someEvent)="hasError($event)">\n    </span>\n  '})],o)}(),d=function(){function e(){}return Object.defineProperty(e.prototype,"segments",{get:function(){return s(this.paragraph)},enumerable:!0,configurable:!0}),l([t(),m("design:type",String)],e.prototype,"paragraph",void 0),e=l([n({selector:"ng-katex-paragraph",template:'\n    <p>\n      <ng-container *ngFor="let segment of segments">\n        <ng-katex\n          *ngIf="segment.math else text"\n          [equation]="segment.raw"\n          [options]="{ displayMode: segment.type === \'display\' }">\n        </ng-katex>\n        <ng-template #text>{{ segment.value }}</ng-template>\n      </ng-container>\n    </p>\n  '})],e)}(),h=function(){function t(){}return t.prototype.render=function(t,e,n){return u(t,e.nativeElement,n)},t.prototype.renderToString=function(t,e){return f(t,e)},t=l([o()],t)}(),v=function(){function n(t,e){this.el=t,this.katexService=e,this.onError=new r}
n.ɵfac = function v_Factory(t) { ɵngcc0.ɵɵinvalidFactory(); };
n.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: n, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
return n.prototype.ngOnChanges=function(){try{this.katexService.render(this.equation,this.el,this.options)}catch(t){this.onError.emit(t)}},l([t("katex"),m("design:type",String)],n.prototype,"equation",void 0),l([t("katex-options"),m("design:type",Object)],n.prototype,"options",void 0),l([e(),m("design:type",Object)],n.prototype,"onError",void 0),n=l([i({selector:"[katex]"}),m("design:paramtypes",[a,h])],n)}(),x=function(){function e(t,e){this.domSanitizer=t,this.katexService=e}return Object.defineProperty(e.prototype,"allHtml",{get:function(){var t=this,e=this.segments.map(function(e){return e.math?t.katexService.renderToString(e.raw,{displayMode:"display"===e.type}):e.value}).reduce(function(t,e){return t+e});return this.domSanitizer.bypassSecurityTrustHtml(e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"segments",{get:function(){return s(this.html)},enumerable:!0,configurable:!0}),l([t(),m("design:type",String)],e.prototype,"html",void 0),e=l([n({selector:"ng-katex-html",template:'<span [innerHTML]="allHtml"></span>'}),m("design:paramtypes",[g,h])],e)}(),b=function(){function t(){}return t=l([p({imports:[c],providers:[h],declarations:[v,y,d,x],exports:[y,d,x]})],t)}();export{y as KatexComponent,b as KatexModule,d as KatexParagraphComponent};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmcta2F0ZXguZXNtLmpzIiwic291cmNlcyI6WyJuZy1rYXRleC5lc20uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBc1Y7OztBQUEwdkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnR7SW5wdXQgYXMgdCxPdXRwdXQgYXMgZSxDb21wb25lbnQgYXMgbixFdmVudEVtaXR0ZXIgYXMgcixJbmplY3RhYmxlIGFzIG8sRGlyZWN0aXZlIGFzIGksRWxlbWVudFJlZiBhcyBhLE5nTW9kdWxlIGFzIHB9ZnJvbVwiQGFuZ3VsYXIvY29yZVwiO2ltcG9ydHtleHRyYWN0TWF0aCBhcyBzfWZyb21cImV4dHJhY3QtbWF0aFwiO2ltcG9ydHtDb21tb25Nb2R1bGUgYXMgY31mcm9tXCJAYW5ndWxhci9jb21tb25cIjtpbXBvcnR7cmVuZGVyIGFzIHUscmVuZGVyVG9TdHJpbmcgYXMgZn1mcm9tXCJrYXRleFwiO2ltcG9ydHtEb21TYW5pdGl6ZXIgYXMgZ31mcm9tXCJAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyXCI7ZnVuY3Rpb24gbCh0LGUsbixyKXt2YXIgbyxpPWFyZ3VtZW50cy5sZW5ndGgsYT1pPDM/ZTpudWxsPT09cj9yPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxuKTpyO2lmKFwib2JqZWN0XCI9PXR5cGVvZiBSZWZsZWN0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBSZWZsZWN0LmRlY29yYXRlKWE9UmVmbGVjdC5kZWNvcmF0ZSh0LGUsbixyKTtlbHNlIGZvcih2YXIgcD10Lmxlbmd0aC0xO3A+PTA7cC0tKShvPXRbcF0pJiYoYT0oaTwzP28oYSk6aT4zP28oZSxuLGEpOm8oZSxuKSl8fGEpO3JldHVybiBpPjMmJmEmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4sYSksYX1mdW5jdGlvbiBtKHQsZSl7aWYoXCJvYmplY3RcIj09dHlwZW9mIFJlZmxlY3QmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFJlZmxlY3QubWV0YWRhdGEpcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEodCxlKX12YXIgeT1mdW5jdGlvbigpe2Z1bmN0aW9uIG8oKXt0aGlzLm9uRXJyb3I9bmV3IHJ9cmV0dXJuIG8ucHJvdG90eXBlLmhhc0Vycm9yPWZ1bmN0aW9uKHQpe3RoaXMub25FcnJvci5lbWl0KHQpfSxsKFt0KCksbShcImRlc2lnbjp0eXBlXCIsU3RyaW5nKV0sby5wcm90b3R5cGUsXCJlcXVhdGlvblwiLHZvaWQgMCksbChbdCgpLG0oXCJkZXNpZ246dHlwZVwiLE9iamVjdCldLG8ucHJvdG90eXBlLFwib3B0aW9uc1wiLHZvaWQgMCksbChbZSgpLG0oXCJkZXNpZ246dHlwZVwiLE9iamVjdCldLG8ucHJvdG90eXBlLFwib25FcnJvclwiLHZvaWQgMCksbz1sKFtuKHtzZWxlY3RvcjpcIm5nLWthdGV4XCIsdGVtcGxhdGU6J1xcbiAgICA8c3BhbiBba2F0ZXhdPVwiZXF1YXRpb25cIlxcbiAgICAgICAgICBba2F0ZXgtb3B0aW9uc109XCJvcHRpb25zXCJcXG4gICAgICAgICAgKHNvbWVFdmVudCk9XCJoYXNFcnJvcigkZXZlbnQpXCI+XFxuICAgIDwvc3Bhbj5cXG4gICd9KV0sbyl9KCksZD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt9cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcInNlZ21lbnRzXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBzKHRoaXMucGFyYWdyYXBoKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxsKFt0KCksbShcImRlc2lnbjp0eXBlXCIsU3RyaW5nKV0sZS5wcm90b3R5cGUsXCJwYXJhZ3JhcGhcIix2b2lkIDApLGU9bChbbih7c2VsZWN0b3I6XCJuZy1rYXRleC1wYXJhZ3JhcGhcIix0ZW1wbGF0ZTonXFxuICAgIDxwPlxcbiAgICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IHNlZ21lbnQgb2Ygc2VnbWVudHNcIj5cXG4gICAgICAgIDxuZy1rYXRleFxcbiAgICAgICAgICAqbmdJZj1cInNlZ21lbnQubWF0aCBlbHNlIHRleHRcIlxcbiAgICAgICAgICBbZXF1YXRpb25dPVwic2VnbWVudC5yYXdcIlxcbiAgICAgICAgICBbb3B0aW9uc109XCJ7IGRpc3BsYXlNb2RlOiBzZWdtZW50LnR5cGUgPT09IFxcJ2Rpc3BsYXlcXCcgfVwiPlxcbiAgICAgICAgPC9uZy1rYXRleD5cXG4gICAgICAgIDxuZy10ZW1wbGF0ZSAjdGV4dD57eyBzZWdtZW50LnZhbHVlIH19PC9uZy10ZW1wbGF0ZT5cXG4gICAgICA8L25nLWNvbnRhaW5lcj5cXG4gICAgPC9wPlxcbiAgJ30pXSxlKX0oKSxoPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe31yZXR1cm4gdC5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdSh0LGUubmF0aXZlRWxlbWVudCxuKX0sdC5wcm90b3R5cGUucmVuZGVyVG9TdHJpbmc9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZih0LGUpfSx0PWwoW28oKV0sdCl9KCksdj1mdW5jdGlvbigpe2Z1bmN0aW9uIG4odCxlKXt0aGlzLmVsPXQsdGhpcy5rYXRleFNlcnZpY2U9ZSx0aGlzLm9uRXJyb3I9bmV3IHJ9cmV0dXJuIG4ucHJvdG90eXBlLm5nT25DaGFuZ2VzPWZ1bmN0aW9uKCl7dHJ5e3RoaXMua2F0ZXhTZXJ2aWNlLnJlbmRlcih0aGlzLmVxdWF0aW9uLHRoaXMuZWwsdGhpcy5vcHRpb25zKX1jYXRjaCh0KXt0aGlzLm9uRXJyb3IuZW1pdCh0KX19LGwoW3QoXCJrYXRleFwiKSxtKFwiZGVzaWduOnR5cGVcIixTdHJpbmcpXSxuLnByb3RvdHlwZSxcImVxdWF0aW9uXCIsdm9pZCAwKSxsKFt0KFwia2F0ZXgtb3B0aW9uc1wiKSxtKFwiZGVzaWduOnR5cGVcIixPYmplY3QpXSxuLnByb3RvdHlwZSxcIm9wdGlvbnNcIix2b2lkIDApLGwoW2UoKSxtKFwiZGVzaWduOnR5cGVcIixPYmplY3QpXSxuLnByb3RvdHlwZSxcIm9uRXJyb3JcIix2b2lkIDApLG49bChbaSh7c2VsZWN0b3I6XCJba2F0ZXhdXCJ9KSxtKFwiZGVzaWduOnBhcmFtdHlwZXNcIixbYSxoXSldLG4pfSgpLHg9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQsZSl7dGhpcy5kb21TYW5pdGl6ZXI9dCx0aGlzLmthdGV4U2VydmljZT1lfXJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJhbGxIdG1sXCIse2dldDpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10aGlzLnNlZ21lbnRzLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS5tYXRoP3Qua2F0ZXhTZXJ2aWNlLnJlbmRlclRvU3RyaW5nKGUucmF3LHtkaXNwbGF5TW9kZTpcImRpc3BsYXlcIj09PWUudHlwZX0pOmUudmFsdWV9KS5yZWR1Y2UoZnVuY3Rpb24odCxlKXtyZXR1cm4gdCtlfSk7cmV0dXJuIHRoaXMuZG9tU2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RIdG1sKGUpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcInNlZ21lbnRzXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBzKHRoaXMuaHRtbCl9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksbChbdCgpLG0oXCJkZXNpZ246dHlwZVwiLFN0cmluZyldLGUucHJvdG90eXBlLFwiaHRtbFwiLHZvaWQgMCksZT1sKFtuKHtzZWxlY3RvcjpcIm5nLWthdGV4LWh0bWxcIix0ZW1wbGF0ZTonPHNwYW4gW2lubmVySFRNTF09XCJhbGxIdG1sXCI+PC9zcGFuPid9KSxtKFwiZGVzaWduOnBhcmFtdHlwZXNcIixbZyxoXSldLGUpfSgpLGI9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7fXJldHVybiB0PWwoW3Aoe2ltcG9ydHM6W2NdLHByb3ZpZGVyczpbaF0sZGVjbGFyYXRpb25zOlt2LHksZCx4XSxleHBvcnRzOlt5LGQseF19KV0sdCl9KCk7ZXhwb3J0e3kgYXMgS2F0ZXhDb21wb25lbnQsYiBhcyBLYXRleE1vZHVsZSxkIGFzIEthdGV4UGFyYWdyYXBoQ29tcG9uZW50fTtcbiJdfQ==